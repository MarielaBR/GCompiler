/* The following code was generated by JFlex 1.6.1 */

/* --------------------Seccion de codigo de usuario---------------------- */
package analizador;

import java.util.ArrayList;
import java_cup.runtime.*;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.6.1
 * from the specification file <tt>C:/Users/cesar_pruefkd/Desktop/GPlusCompiler/src/analizador/alexico.flex</tt>
 */
public class AnalizadorLexico implements java_cup.runtime.Scanner {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0, 0
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\2\3\2\0\1\3\22\0\1\4\1\53\1\12\3\11\1\54"+
    "\1\10\1\43\1\44\1\6\1\56\1\61\1\7\1\60\1\5\12\2"+
    "\1\0\1\57\1\52\1\42\1\51\1\10\1\0\1\23\1\17\1\27"+
    "\1\35\1\22\1\30\1\26\1\33\1\14\2\1\1\21\1\36\1\15"+
    "\1\20\1\32\1\1\1\25\1\24\1\16\1\40\1\37\1\41\1\34"+
    "\1\31\1\1\1\47\1\0\1\50\1\10\34\0\1\45\1\55\1\46"+
    "\43\0\1\11\6\0\1\10\3\0\1\10\3\0\1\10\3\0\1\10"+
    "\2\0\1\11\7\0\1\10\1\0\1\11\2\0\1\11\4\0\1\11"+
    "\1\0\1\11\1\0\1\11\1\0\1\11\1\0\1\11\1\0\1\11"+
    "\2\0\1\11\3\0\1\11\1\0\1\11\1\11\23\0\1\13\u1f2a\0"+
    "\2\13\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\udff2\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\1\2\1\3\1\4\1\1\1\5\2\1"+
    "\21\2\1\6\1\7\1\10\1\11\1\12\1\13\1\14"+
    "\1\15\1\16\2\1\1\17\1\20\1\21\1\22\1\23"+
    "\1\0\1\4\1\0\1\24\1\2\1\25\40\2\1\26"+
    "\1\27\1\30\1\31\1\32\1\0\1\24\1\33\1\2"+
    "\1\34\1\2\1\35\37\2\1\36\1\2\1\37\1\2"+
    "\1\40\1\41\4\2\1\42\1\43\33\2\1\44\1\45"+
    "\2\2\1\46\25\2\1\47\2\2\1\50\20\2\1\51"+
    "\1\52\25\2\1\53\2\2\1\54\23\2\1\55\1\2"+
    "\1\56\2\2\1\57\24\2\1\60\2\2\1\61\10\2"+
    "\1\62\5\2\1\63\10\2\1\64\2\2\1\65\2\2"+
    "\1\66\6\2\1\67\6\2\1\70\2\2\1\71\1\72"+
    "\1\2\1\73\1\74\1\2\1\75\1\2\1\76\2\2"+
    "\1\77\2\2\1\100\1\2\1\101\1\2\1\102\6\2"+
    "\1\103\1\104\1\2\1\105\4\2\1\106\1\107\1\110";

  private static int [] zzUnpackAction() {
    int [] result = new int[366];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\62\0\144\0\226\0\62\0\310\0\372\0\u012c"+
    "\0\u015e\0\u0190\0\u01c2\0\u01f4\0\u0226\0\u0258\0\u028a\0\u02bc"+
    "\0\u02ee\0\u0320\0\u0352\0\u0384\0\u03b6\0\u03e8\0\u041a\0\u044c"+
    "\0\u047e\0\u04b0\0\u04e2\0\62\0\62\0\62\0\62\0\62"+
    "\0\62\0\u0514\0\u0546\0\u0578\0\u05aa\0\62\0\62\0\62"+
    "\0\62\0\62\0\u05dc\0\u060e\0\u0640\0\u012c\0\u0672\0\144"+
    "\0\u06a4\0\u06d6\0\u0708\0\u073a\0\u076c\0\u079e\0\u07d0\0\u0802"+
    "\0\u0834\0\u0866\0\u0898\0\u08ca\0\u08fc\0\u092e\0\u0960\0\u0992"+
    "\0\u09c4\0\u09f6\0\u0a28\0\u0a5a\0\u0a8c\0\u0abe\0\u0af0\0\u0b22"+
    "\0\u0b54\0\u0b86\0\u0bb8\0\u0bea\0\u0c1c\0\u0c4e\0\u0c80\0\u0cb2"+
    "\0\62\0\62\0\62\0\62\0\u012c\0\u0ce4\0\62\0\144"+
    "\0\u0d16\0\144\0\u0d48\0\144\0\u0d7a\0\u0dac\0\u0dde\0\u0e10"+
    "\0\u0e42\0\u0e74\0\u0ea6\0\u0ed8\0\u0f0a\0\u0f3c\0\u0f6e\0\u0fa0"+
    "\0\u0fd2\0\u1004\0\u1036\0\u1068\0\u109a\0\u10cc\0\u10fe\0\u1130"+
    "\0\u1162\0\u1194\0\u11c6\0\u11f8\0\u122a\0\u125c\0\u128e\0\u12c0"+
    "\0\u12f2\0\u1324\0\u1356\0\144\0\u1388\0\144\0\u13ba\0\144"+
    "\0\144\0\u13ec\0\u141e\0\u1450\0\u1482\0\144\0\144\0\u14b4"+
    "\0\u14e6\0\u1518\0\u154a\0\u157c\0\u15ae\0\u15e0\0\u1612\0\u1644"+
    "\0\u1676\0\u16a8\0\u16da\0\u170c\0\u173e\0\u1770\0\u17a2\0\u17d4"+
    "\0\u1806\0\u1838\0\u186a\0\u189c\0\u18ce\0\u1900\0\u1932\0\u1964"+
    "\0\u1996\0\u19c8\0\144\0\144\0\u19fa\0\u1a2c\0\144\0\u1a5e"+
    "\0\u1a90\0\u1ac2\0\u1af4\0\u1b26\0\u1b58\0\u1b8a\0\u1bbc\0\u1bee"+
    "\0\u1c20\0\u1c52\0\u1c84\0\u1cb6\0\u1ce8\0\u1d1a\0\u1d4c\0\u1d7e"+
    "\0\u1db0\0\u1de2\0\u1e14\0\u1e46\0\144\0\u1e78\0\u1eaa\0\144"+
    "\0\u1edc\0\u1f0e\0\u1f40\0\u1f72\0\u1fa4\0\u1fd6\0\u2008\0\u203a"+
    "\0\u206c\0\u209e\0\u20d0\0\u2102\0\u2134\0\u2166\0\u2198\0\u21ca"+
    "\0\144\0\144\0\u21fc\0\u222e\0\u2260\0\u2292\0\u22c4\0\u22f6"+
    "\0\u2328\0\u235a\0\u238c\0\u23be\0\u23f0\0\u2422\0\u2454\0\u2486"+
    "\0\u24b8\0\u24ea\0\u251c\0\u254e\0\u2580\0\u25b2\0\u25e4\0\144"+
    "\0\u2616\0\u2648\0\144\0\u267a\0\u26ac\0\u26de\0\u2710\0\u2742"+
    "\0\u2774\0\u27a6\0\u27d8\0\u280a\0\u283c\0\u286e\0\u28a0\0\u28d2"+
    "\0\u2904\0\u2936\0\u2968\0\u299a\0\u29cc\0\u29fe\0\144\0\u2a30"+
    "\0\144\0\u2a62\0\u2a94\0\144\0\u2ac6\0\u2af8\0\u2b2a\0\u2b5c"+
    "\0\u2b8e\0\u2bc0\0\u2bf2\0\u2c24\0\u2c56\0\u2c88\0\u2cba\0\u2cec"+
    "\0\u2d1e\0\u2d50\0\u2d82\0\u2db4\0\u2de6\0\u2e18\0\u2e4a\0\u2e7c"+
    "\0\144\0\u2eae\0\u2ee0\0\144\0\u2f12\0\u2f44\0\u2f76\0\u2fa8"+
    "\0\u2fda\0\u300c\0\u303e\0\u3070\0\144\0\u30a2\0\u30d4\0\u3106"+
    "\0\u3138\0\u316a\0\144\0\u319c\0\u31ce\0\u3200\0\u3232\0\u3264"+
    "\0\u3296\0\u32c8\0\u32fa\0\144\0\u332c\0\u335e\0\144\0\u3390"+
    "\0\u33c2\0\144\0\u33f4\0\u3426\0\u3458\0\u348a\0\u34bc\0\u34ee"+
    "\0\144\0\u3520\0\u3552\0\u3584\0\u35b6\0\u35e8\0\u361a\0\144"+
    "\0\u364c\0\u367e\0\144\0\144\0\u36b0\0\144\0\144\0\u36e2"+
    "\0\144\0\u3714\0\144\0\u3746\0\u3778\0\144\0\u37aa\0\u37dc"+
    "\0\144\0\u380e\0\144\0\u3840\0\144\0\u3872\0\u38a4\0\u38d6"+
    "\0\u3908\0\u393a\0\u396c\0\144\0\144\0\u399e\0\144\0\u39d0"+
    "\0\u3a02\0\u3a34\0\u3a66\0\144\0\144\0\144";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[366];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\1\3\1\4\2\5\1\6\1\2\1\7\1\2"+
    "\1\10\1\11\1\10\1\12\1\13\1\14\1\15\1\16"+
    "\1\17\1\20\1\21\1\22\1\23\1\24\1\25\1\26"+
    "\1\3\1\27\1\30\1\3\1\31\1\32\3\3\1\33"+
    "\1\34\1\35\1\36\1\37\1\40\1\41\1\42\1\43"+
    "\1\44\1\45\1\46\1\47\1\50\1\51\1\52\63\0"+
    "\2\3\2\0\1\10\3\0\3\10\26\3\11\0\2\10"+
    "\6\0\1\10\1\4\2\0\1\10\3\0\31\10\11\0"+
    "\2\10\6\0\2\10\2\0\1\10\1\53\2\0\31\10"+
    "\11\0\2\10\6\0\2\54\1\0\7\54\1\0\43\54"+
    "\4\0\2\10\2\0\1\10\3\0\31\10\11\0\2\10"+
    "\6\0\2\11\1\0\1\55\1\10\3\0\1\10\1\56"+
    "\1\10\26\11\11\0\2\10\6\0\2\3\2\0\1\10"+
    "\3\0\3\10\1\3\1\57\12\3\1\60\11\3\11\0"+
    "\2\10\6\0\2\3\2\0\1\10\3\0\3\10\4\3"+
    "\1\61\1\3\1\62\17\3\11\0\2\10\6\0\2\3"+
    "\2\0\1\10\3\0\3\10\11\3\1\63\14\3\11\0"+
    "\2\10\6\0\2\3\2\0\1\10\3\0\3\10\4\3"+
    "\1\64\17\3\1\65\1\3\11\0\2\10\6\0\2\3"+
    "\2\0\1\10\3\0\3\10\16\3\1\66\7\3\11\0"+
    "\2\10\6\0\2\3\2\0\1\10\3\0\3\10\1\67"+
    "\3\3\1\70\21\3\11\0\2\10\6\0\2\3\2\0"+
    "\1\10\3\0\3\10\5\3\1\71\20\3\11\0\2\10"+
    "\6\0\2\3\2\0\1\10\3\0\3\10\1\3\1\72"+
    "\1\3\1\73\5\3\1\74\2\3\1\75\1\3\1\76"+
    "\7\3\11\0\2\10\6\0\2\3\2\0\1\10\3\0"+
    "\3\10\2\3\1\77\1\3\1\100\1\3\1\101\15\3"+
    "\1\102\1\3\11\0\2\10\6\0\2\3\2\0\1\10"+
    "\3\0\3\10\6\3\1\103\17\3\11\0\2\10\6\0"+
    "\2\3\2\0\1\10\3\0\3\10\6\3\1\104\2\3"+
    "\1\105\14\3\11\0\2\10\6\0\2\3\2\0\1\10"+
    "\3\0\3\10\7\3\1\106\16\3\11\0\2\10\6\0"+
    "\2\3\2\0\1\10\3\0\3\10\6\3\1\107\1\110"+
    "\16\3\11\0\2\10\6\0\2\3\2\0\1\10\3\0"+
    "\3\10\6\3\1\111\2\3\1\112\14\3\11\0\2\10"+
    "\6\0\2\3\2\0\1\10\3\0\3\10\7\3\1\113"+
    "\16\3\11\0\2\10\6\0\2\3\2\0\1\10\3\0"+
    "\3\10\4\3\1\114\1\3\1\115\1\116\16\3\11\0"+
    "\2\10\6\0\2\3\2\0\1\10\3\0\3\10\1\117"+
    "\6\3\1\120\16\3\11\0\2\10\47\0\1\121\61\0"+
    "\1\122\61\0\1\123\20\0\2\10\2\0\1\10\3\0"+
    "\31\10\1\124\10\0\2\10\6\0\2\10\2\0\1\10"+
    "\3\0\31\10\11\0\1\10\1\125\5\0\6\53\1\126"+
    "\53\53\1\0\2\54\1\0\3\54\1\0\3\54\1\0"+
    "\43\54\4\0\2\55\1\0\1\55\5\0\1\127\1\0"+
    "\26\55\21\0\2\3\2\0\1\10\3\0\3\10\2\3"+
    "\1\130\16\3\1\131\4\3\11\0\2\10\6\0\2\3"+
    "\2\0\1\10\3\0\3\10\2\3\1\132\16\3\1\133"+
    "\4\3\11\0\2\10\6\0\2\3\2\0\1\10\3\0"+
    "\3\10\25\3\1\134\11\0\2\10\6\0\2\3\2\0"+
    "\1\10\3\0\3\10\24\3\1\135\1\3\11\0\2\10"+
    "\6\0\2\3\2\0\1\10\3\0\3\10\4\3\1\136"+
    "\21\3\11\0\2\10\6\0\2\3\2\0\1\10\3\0"+
    "\3\10\1\137\25\3\11\0\2\10\6\0\2\3\2\0"+
    "\1\10\3\0\3\10\6\3\1\140\17\3\11\0\2\10"+
    "\6\0\2\3\2\0\1\10\3\0\3\10\23\3\1\141"+
    "\2\3\11\0\2\10\6\0\2\3\2\0\1\10\3\0"+
    "\3\10\4\3\1\142\21\3\11\0\2\10\6\0\2\3"+
    "\2\0\1\10\3\0\3\10\10\3\1\143\15\3\11\0"+
    "\2\10\6\0\2\3\2\0\1\10\3\0\3\10\20\3"+
    "\1\144\5\3\11\0\2\10\6\0\2\3\2\0\1\10"+
    "\3\0\3\10\10\3\1\145\15\3\11\0\2\10\6\0"+
    "\2\3\2\0\1\10\3\0\3\10\11\3\1\146\14\3"+
    "\11\0\2\10\6\0\2\3\2\0\1\10\3\0\3\10"+
    "\14\3\1\147\11\3\11\0\2\10\6\0\2\3\2\0"+
    "\1\10\3\0\3\10\16\3\1\150\7\3\11\0\2\10"+
    "\6\0\2\3\2\0\1\10\3\0\3\10\7\3\1\151"+
    "\1\3\1\152\14\3\11\0\2\10\6\0\2\3\2\0"+
    "\1\10\3\0\3\10\13\3\1\153\12\3\11\0\2\10"+
    "\6\0\2\3\2\0\1\10\3\0\3\10\1\3\1\154"+
    "\3\3\1\155\20\3\11\0\2\10\6\0\2\3\2\0"+
    "\1\10\3\0\3\10\11\3\1\156\14\3\11\0\2\10"+
    "\6\0\2\3\2\0\1\10\3\0\3\10\7\3\1\157"+
    "\16\3\11\0\2\10\6\0\2\3\2\0\1\10\3\0"+
    "\3\10\1\3\1\160\1\161\23\3\11\0\2\10\6\0"+
    "\2\3\2\0\1\10\3\0\3\10\4\3\1\162\21\3"+
    "\11\0\2\10\6\0\2\3\2\0\1\10\3\0\3\10"+
    "\11\3\1\163\14\3\11\0\2\10\6\0\2\3\2\0"+
    "\1\10\3\0\3\10\7\3\1\164\16\3\11\0\2\10"+
    "\6\0\2\3\2\0\1\10\3\0\3\10\5\3\1\165"+
    "\20\3\11\0\2\10\6\0\2\3\2\0\1\10\3\0"+
    "\3\10\11\3\1\166\14\3\11\0\2\10\6\0\2\3"+
    "\2\0\1\10\3\0\3\10\1\167\25\3\11\0\2\10"+
    "\6\0\2\3\2\0\1\10\3\0\3\10\11\3\1\170"+
    "\14\3\11\0\2\10\6\0\2\3\2\0\1\10\3\0"+
    "\3\10\22\3\1\171\3\3\11\0\2\10\6\0\2\3"+
    "\2\0\1\10\3\0\3\10\13\3\1\172\12\3\11\0"+
    "\2\10\6\0\2\3\2\0\1\10\3\0\3\10\11\3"+
    "\1\173\14\3\11\0\2\10\6\0\2\3\2\0\1\10"+
    "\3\0\3\10\1\3\1\174\24\3\11\0\2\10\6\0"+
    "\2\3\2\0\1\10\3\0\3\10\1\175\17\3\1\176"+
    "\5\3\11\0\2\10\5\0\5\53\1\5\1\126\53\53"+
    "\1\0\2\3\2\0\1\10\3\0\3\10\6\3\1\177"+
    "\17\3\11\0\2\10\6\0\2\3\2\0\1\10\3\0"+
    "\3\10\6\3\1\200\17\3\11\0\2\10\6\0\2\3"+
    "\2\0\1\10\3\0\3\10\6\3\1\201\17\3\11\0"+
    "\2\10\6\0\2\3\2\0\1\10\3\0\3\10\5\3"+
    "\1\202\20\3\11\0\2\10\6\0\2\3\2\0\1\10"+
    "\3\0\3\10\5\3\1\203\20\3\11\0\2\10\6\0"+
    "\2\3\2\0\1\10\3\0\3\10\1\3\1\204\24\3"+
    "\11\0\2\10\6\0\2\3\2\0\1\10\3\0\3\10"+
    "\6\3\1\205\17\3\11\0\2\10\6\0\2\3\2\0"+
    "\1\10\3\0\3\10\16\3\1\206\7\3\11\0\2\10"+
    "\6\0\2\3\2\0\1\10\3\0\3\10\6\3\1\207"+
    "\17\3\11\0\2\10\6\0\2\3\2\0\1\10\3\0"+
    "\3\10\1\210\25\3\11\0\2\10\6\0\2\3\2\0"+
    "\1\10\3\0\3\10\2\3\1\211\23\3\11\0\2\10"+
    "\6\0\2\3\2\0\1\10\3\0\3\10\7\3\1\212"+
    "\16\3\11\0\2\10\6\0\2\3\2\0\1\10\3\0"+
    "\3\10\7\3\1\213\16\3\11\0\2\10\6\0\2\3"+
    "\2\0\1\10\3\0\3\10\11\3\1\214\14\3\11\0"+
    "\2\10\6\0\2\3\2\0\1\10\3\0\3\10\3\3"+
    "\1\215\22\3\11\0\2\10\6\0\2\3\2\0\1\10"+
    "\3\0\3\10\1\216\5\3\1\217\17\3\11\0\2\10"+
    "\6\0\2\3\2\0\1\10\3\0\3\10\1\220\25\3"+
    "\11\0\2\10\6\0\2\3\2\0\1\10\3\0\3\10"+
    "\10\3\1\221\15\3\11\0\2\10\6\0\2\3\2\0"+
    "\1\10\3\0\3\10\14\3\1\222\11\3\11\0\2\10"+
    "\6\0\2\3\2\0\1\10\3\0\3\10\23\3\1\223"+
    "\2\3\11\0\2\10\6\0\2\3\2\0\1\10\3\0"+
    "\3\10\10\3\1\224\10\3\1\225\4\3\11\0\2\10"+
    "\6\0\2\3\2\0\1\10\3\0\3\10\6\3\1\226"+
    "\17\3\11\0\2\10\6\0\2\3\2\0\1\10\3\0"+
    "\3\10\10\3\1\227\3\3\1\230\11\3\11\0\2\10"+
    "\6\0\2\3\2\0\1\10\3\0\3\10\24\3\1\231"+
    "\1\3\11\0\2\10\6\0\2\3\2\0\1\10\3\0"+
    "\3\10\6\3\1\232\17\3\11\0\2\10\6\0\2\3"+
    "\2\0\1\10\3\0\3\10\2\3\1\233\23\3\11\0"+
    "\2\10\6\0\2\3\2\0\1\10\3\0\3\10\10\3"+
    "\1\234\15\3\11\0\2\10\6\0\2\3\2\0\1\10"+
    "\3\0\3\10\14\3\1\235\11\3\11\0\2\10\6\0"+
    "\2\3\2\0\1\10\3\0\3\10\1\3\1\236\21\3"+
    "\1\237\2\3\11\0\2\10\6\0\2\3\2\0\1\10"+
    "\3\0\3\10\21\3\1\240\4\3\11\0\2\10\6\0"+
    "\2\3\2\0\1\10\3\0\3\10\1\241\25\3\11\0"+
    "\2\10\6\0\2\3\2\0\1\10\3\0\3\10\5\3"+
    "\1\242\20\3\11\0\2\10\6\0\2\3\2\0\1\10"+
    "\3\0\3\10\6\3\1\243\17\3\11\0\2\10\6\0"+
    "\2\3\2\0\1\10\3\0\3\10\1\3\1\244\24\3"+
    "\11\0\2\10\6\0\2\3\2\0\1\10\3\0\3\10"+
    "\16\3\1\245\7\3\11\0\2\10\6\0\2\3\2\0"+
    "\1\10\3\0\3\10\6\3\1\246\17\3\11\0\2\10"+
    "\6\0\2\3\2\0\1\10\3\0\3\10\21\3\1\247"+
    "\4\3\11\0\2\10\6\0\2\3\2\0\1\10\3\0"+
    "\3\10\1\3\1\250\24\3\11\0\2\10\6\0\2\3"+
    "\2\0\1\10\3\0\3\10\5\3\1\251\20\3\11\0"+
    "\2\10\6\0\2\3\2\0\1\10\3\0\3\10\6\3"+
    "\1\252\17\3\11\0\2\10\6\0\2\3\2\0\1\10"+
    "\3\0\3\10\11\3\1\253\14\3\11\0\2\10\6\0"+
    "\2\3\2\0\1\10\3\0\3\10\15\3\1\254\10\3"+
    "\11\0\2\10\6\0\2\3\2\0\1\10\3\0\3\10"+
    "\3\3\1\255\22\3\11\0\2\10\6\0\2\3\2\0"+
    "\1\10\3\0\3\10\6\3\1\256\17\3\11\0\2\10"+
    "\6\0\2\3\2\0\1\10\3\0\3\10\1\257\25\3"+
    "\11\0\2\10\6\0\2\3\2\0\1\10\3\0\3\10"+
    "\1\3\1\260\24\3\11\0\2\10\6\0\2\3\2\0"+
    "\1\10\3\0\3\10\10\3\1\261\15\3\11\0\2\10"+
    "\6\0\2\3\2\0\1\10\3\0\3\10\7\3\1\262"+
    "\16\3\11\0\2\10\6\0\2\3\2\0\1\10\3\0"+
    "\3\10\1\263\25\3\11\0\2\10\6\0\2\3\2\0"+
    "\1\10\3\0\3\10\10\3\1\264\2\3\1\265\12\3"+
    "\11\0\2\10\6\0\2\3\2\0\1\10\3\0\3\10"+
    "\6\3\1\266\17\3\11\0\2\10\6\0\2\3\2\0"+
    "\1\10\3\0\3\10\4\3\1\267\21\3\11\0\2\10"+
    "\6\0\2\3\2\0\1\10\3\0\3\10\10\3\1\270"+
    "\3\3\1\271\11\3\11\0\2\10\6\0\2\3\2\0"+
    "\1\10\3\0\3\10\11\3\1\272\14\3\11\0\2\10"+
    "\6\0\2\3\2\0\1\10\3\0\3\10\1\273\25\3"+
    "\11\0\2\10\6\0\2\3\2\0\1\10\3\0\3\10"+
    "\6\3\1\274\17\3\11\0\2\10\6\0\2\3\2\0"+
    "\1\10\3\0\3\10\16\3\1\275\7\3\11\0\2\10"+
    "\6\0\2\3\2\0\1\10\3\0\3\10\2\3\1\276"+
    "\23\3\11\0\2\10\6\0\2\3\2\0\1\10\3\0"+
    "\3\10\24\3\1\277\1\3\11\0\2\10\6\0\2\3"+
    "\2\0\1\10\3\0\3\10\6\3\1\300\17\3\11\0"+
    "\2\10\6\0\2\3\2\0\1\10\3\0\3\10\6\3"+
    "\1\301\17\3\11\0\2\10\6\0\2\3\2\0\1\10"+
    "\3\0\3\10\2\3\1\302\23\3\11\0\2\10\6\0"+
    "\2\3\2\0\1\10\3\0\3\10\7\3\1\303\16\3"+
    "\11\0\2\10\6\0\2\3\2\0\1\10\3\0\3\10"+
    "\1\3\1\304\24\3\11\0\2\10\6\0\2\3\2\0"+
    "\1\10\3\0\3\10\1\3\1\305\24\3\11\0\2\10"+
    "\6\0\2\3\2\0\1\10\3\0\3\10\7\3\1\306"+
    "\16\3\11\0\2\10\6\0\2\3\2\0\1\10\3\0"+
    "\3\10\6\3\1\307\17\3\11\0\2\10\6\0\2\3"+
    "\2\0\1\10\3\0\3\10\7\3\1\310\16\3\11\0"+
    "\2\10\6\0\2\3\2\0\1\10\3\0\3\10\6\3"+
    "\1\311\17\3\11\0\2\10\6\0\2\3\2\0\1\10"+
    "\3\0\3\10\1\312\25\3\11\0\2\10\6\0\2\3"+
    "\2\0\1\10\3\0\3\10\2\3\1\313\23\3\11\0"+
    "\2\10\6\0\2\3\2\0\1\10\3\0\3\10\7\3"+
    "\1\314\16\3\11\0\2\10\6\0\2\3\2\0\1\10"+
    "\3\0\3\10\10\3\1\315\15\3\11\0\2\10\6\0"+
    "\2\3\2\0\1\10\3\0\3\10\1\316\25\3\11\0"+
    "\2\10\6\0\2\3\2\0\1\10\3\0\3\10\17\3"+
    "\1\317\6\3\11\0\2\10\6\0\2\3\2\0\1\10"+
    "\3\0\3\10\5\3\1\320\20\3\11\0\2\10\6\0"+
    "\2\3\2\0\1\10\3\0\3\10\12\3\1\321\13\3"+
    "\11\0\2\10\6\0\2\3\2\0\1\10\3\0\3\10"+
    "\10\3\1\322\15\3\11\0\2\10\6\0\2\3\2\0"+
    "\1\10\3\0\3\10\3\3\1\323\22\3\11\0\2\10"+
    "\6\0\2\3\2\0\1\10\3\0\3\10\2\3\1\324"+
    "\23\3\11\0\2\10\6\0\2\3\2\0\1\10\3\0"+
    "\3\10\24\3\1\325\1\3\11\0\2\10\6\0\2\3"+
    "\2\0\1\10\3\0\3\10\4\3\1\326\21\3\11\0"+
    "\2\10\6\0\2\3\2\0\1\10\3\0\3\10\1\327"+
    "\25\3\11\0\2\10\6\0\2\3\2\0\1\10\3\0"+
    "\3\10\1\3\1\330\24\3\11\0\2\10\6\0\2\3"+
    "\2\0\1\10\3\0\3\10\2\3\1\331\23\3\11\0"+
    "\2\10\6\0\2\3\2\0\1\10\3\0\3\10\6\3"+
    "\1\332\17\3\11\0\2\10\6\0\2\3\2\0\1\10"+
    "\3\0\3\10\7\3\1\333\16\3\11\0\2\10\6\0"+
    "\2\3\2\0\1\10\3\0\3\10\22\3\1\334\3\3"+
    "\11\0\2\10\6\0\2\3\2\0\1\10\3\0\3\10"+
    "\7\3\1\335\16\3\11\0\2\10\6\0\2\3\2\0"+
    "\1\10\3\0\3\10\4\3\1\336\21\3\11\0\2\10"+
    "\6\0\2\3\2\0\1\10\3\0\3\10\11\3\1\337"+
    "\14\3\11\0\2\10\6\0\2\3\2\0\1\10\3\0"+
    "\3\10\13\3\1\340\12\3\11\0\2\10\6\0\2\3"+
    "\2\0\1\10\3\0\3\10\5\3\1\341\4\3\1\342"+
    "\13\3\11\0\2\10\6\0\2\3\2\0\1\10\3\0"+
    "\3\10\13\3\1\343\12\3\11\0\2\10\6\0\2\3"+
    "\2\0\1\10\3\0\3\10\6\3\1\344\17\3\11\0"+
    "\2\10\6\0\2\3\2\0\1\10\3\0\3\10\7\3"+
    "\1\345\16\3\11\0\2\10\6\0\2\3\2\0\1\10"+
    "\3\0\3\10\11\3\1\346\14\3\11\0\2\10\6\0"+
    "\2\3\2\0\1\10\3\0\3\10\1\3\1\347\24\3"+
    "\11\0\2\10\6\0\2\3\2\0\1\10\3\0\3\10"+
    "\1\3\1\350\24\3\11\0\2\10\6\0\2\3\2\0"+
    "\1\10\3\0\3\10\10\3\1\351\15\3\11\0\2\10"+
    "\6\0\2\3\2\0\1\10\3\0\3\10\1\3\1\352"+
    "\24\3\11\0\2\10\6\0\2\3\2\0\1\10\3\0"+
    "\3\10\15\3\1\353\10\3\11\0\2\10\6\0\2\3"+
    "\2\0\1\10\3\0\3\10\13\3\1\354\12\3\11\0"+
    "\2\10\6\0\2\3\2\0\1\10\3\0\3\10\2\3"+
    "\1\355\23\3\11\0\2\10\6\0\2\3\2\0\1\10"+
    "\3\0\3\10\5\3\1\356\20\3\11\0\2\10\6\0"+
    "\2\3\2\0\1\10\3\0\3\10\6\3\1\357\17\3"+
    "\11\0\2\10\6\0\2\3\2\0\1\10\3\0\3\10"+
    "\1\360\25\3\11\0\2\10\6\0\2\3\2\0\1\10"+
    "\3\0\3\10\1\361\25\3\11\0\2\10\6\0\2\3"+
    "\2\0\1\10\3\0\3\10\1\362\25\3\11\0\2\10"+
    "\6\0\2\3\2\0\1\10\3\0\3\10\14\3\1\363"+
    "\11\3\11\0\2\10\6\0\2\3\2\0\1\10\3\0"+
    "\3\10\1\3\1\364\24\3\11\0\2\10\6\0\2\3"+
    "\2\0\1\10\3\0\3\10\5\3\1\365\20\3\11\0"+
    "\2\10\6\0\2\3\2\0\1\10\3\0\3\10\1\366"+
    "\25\3\11\0\2\10\6\0\2\3\2\0\1\10\3\0"+
    "\3\10\11\3\1\367\14\3\11\0\2\10\6\0\2\3"+
    "\2\0\1\10\3\0\3\10\7\3\1\370\16\3\11\0"+
    "\2\10\6\0\2\3\2\0\1\10\3\0\3\10\2\3"+
    "\1\371\23\3\11\0\2\10\6\0\2\3\2\0\1\10"+
    "\3\0\3\10\1\372\25\3\11\0\2\10\6\0\2\3"+
    "\2\0\1\10\3\0\3\10\2\3\1\373\23\3\11\0"+
    "\2\10\6\0\2\3\2\0\1\10\3\0\3\10\10\3"+
    "\1\374\15\3\11\0\2\10\6\0\2\3\2\0\1\10"+
    "\3\0\3\10\6\3\1\375\17\3\11\0\2\10\6\0"+
    "\2\3\2\0\1\10\3\0\3\10\2\3\1\376\23\3"+
    "\11\0\2\10\6\0\2\3\2\0\1\10\3\0\3\10"+
    "\1\3\1\377\24\3\11\0\2\10\6\0\2\3\2\0"+
    "\1\10\3\0\3\10\11\3\1\u0100\14\3\11\0\2\10"+
    "\6\0\2\3\2\0\1\10\3\0\3\10\15\3\1\u0101"+
    "\10\3\11\0\2\10\6\0\2\3\2\0\1\10\3\0"+
    "\3\10\10\3\1\u0102\15\3\11\0\2\10\6\0\2\3"+
    "\2\0\1\10\3\0\3\10\1\3\1\u0103\24\3\11\0"+
    "\2\10\6\0\2\3\2\0\1\10\3\0\3\10\6\3"+
    "\1\u0104\17\3\11\0\2\10\6\0\2\3\2\0\1\10"+
    "\3\0\3\10\21\3\1\u0105\4\3\11\0\2\10\6\0"+
    "\2\3\2\0\1\10\3\0\3\10\10\3\1\u0106\15\3"+
    "\11\0\2\10\6\0\2\3\2\0\1\10\3\0\3\10"+
    "\6\3\1\u0107\17\3\11\0\2\10\6\0\2\3\2\0"+
    "\1\10\3\0\3\10\2\3\1\u0108\23\3\11\0\2\10"+
    "\6\0\2\3\2\0\1\10\3\0\3\10\11\3\1\u0109"+
    "\14\3\11\0\2\10\6\0\2\3\2\0\1\10\3\0"+
    "\3\10\1\u010a\25\3\11\0\2\10\6\0\2\3\2\0"+
    "\1\10\3\0\3\10\1\3\1\u010b\24\3\11\0\2\10"+
    "\6\0\2\3\2\0\1\10\3\0\3\10\2\3\1\u010c"+
    "\23\3\11\0\2\10\6\0\2\3\2\0\1\10\3\0"+
    "\3\10\5\3\1\u010d\20\3\11\0\2\10\6\0\2\3"+
    "\2\0\1\10\3\0\3\10\23\3\1\u010e\2\3\11\0"+
    "\2\10\6\0\2\3\2\0\1\10\3\0\3\10\14\3"+
    "\1\u010f\11\3\11\0\2\10\6\0\2\3\2\0\1\10"+
    "\3\0\3\10\2\3\1\u0110\23\3\11\0\2\10\6\0"+
    "\2\3\2\0\1\10\3\0\3\10\5\3\1\u0111\20\3"+
    "\11\0\2\10\6\0\2\3\2\0\1\10\3\0\3\10"+
    "\1\3\1\u0112\24\3\11\0\2\10\6\0\2\3\2\0"+
    "\1\10\3\0\3\10\1\u0113\25\3\11\0\2\10\6\0"+
    "\2\3\2\0\1\10\3\0\3\10\2\3\1\u0114\23\3"+
    "\11\0\2\10\6\0\2\3\2\0\1\10\3\0\3\10"+
    "\6\3\1\u0115\17\3\11\0\2\10\6\0\2\3\2\0"+
    "\1\10\3\0\3\10\5\3\1\u0116\20\3\11\0\2\10"+
    "\6\0\2\3\2\0\1\10\3\0\3\10\24\3\1\u0117"+
    "\1\3\11\0\2\10\6\0\2\3\2\0\1\10\3\0"+
    "\3\10\2\3\1\u0118\23\3\11\0\2\10\6\0\2\3"+
    "\2\0\1\10\3\0\3\10\10\3\1\u0119\15\3\11\0"+
    "\2\10\6\0\2\3\2\0\1\10\3\0\3\10\1\u011a"+
    "\25\3\11\0\2\10\6\0\2\3\2\0\1\10\3\0"+
    "\3\10\7\3\1\u011b\16\3\11\0\2\10\6\0\2\3"+
    "\2\0\1\10\3\0\3\10\10\3\1\u011c\15\3\11\0"+
    "\2\10\6\0\2\3\2\0\1\10\3\0\3\10\13\3"+
    "\1\u011d\12\3\11\0\2\10\6\0\2\3\2\0\1\10"+
    "\3\0\3\10\6\3\1\u011e\17\3\11\0\2\10\6\0"+
    "\2\3\2\0\1\10\3\0\3\10\2\3\1\u011f\23\3"+
    "\11\0\2\10\6\0\2\3\2\0\1\10\3\0\3\10"+
    "\10\3\1\u0120\15\3\11\0\2\10\6\0\2\3\2\0"+
    "\1\10\3\0\3\10\1\u0121\25\3\11\0\2\10\6\0"+
    "\2\3\2\0\1\10\3\0\3\10\1\u0122\25\3\11\0"+
    "\2\10\6\0\2\3\2\0\1\10\3\0\3\10\2\3"+
    "\1\u0123\23\3\11\0\2\10\6\0\2\3\2\0\1\10"+
    "\3\0\3\10\10\3\1\u0124\15\3\11\0\2\10\6\0"+
    "\2\3\2\0\1\10\3\0\3\10\15\3\1\u0125\10\3"+
    "\11\0\2\10\6\0\2\3\2\0\1\10\3\0\3\10"+
    "\1\u0126\25\3\11\0\2\10\6\0\2\3\2\0\1\10"+
    "\3\0\3\10\1\u0127\25\3\11\0\2\10\6\0\2\3"+
    "\2\0\1\10\3\0\3\10\1\u0128\25\3\11\0\2\10"+
    "\6\0\2\3\2\0\1\10\3\0\3\10\11\3\1\u0129"+
    "\14\3\11\0\2\10\6\0\2\3\2\0\1\10\3\0"+
    "\3\10\7\3\1\u012a\16\3\11\0\2\10\6\0\2\3"+
    "\2\0\1\10\3\0\3\10\12\3\1\u012b\13\3\11\0"+
    "\2\10\6\0\2\3\2\0\1\10\3\0\3\10\1\3"+
    "\1\u012c\24\3\11\0\2\10\6\0\2\3\2\0\1\10"+
    "\3\0\3\10\23\3\1\u012d\2\3\11\0\2\10\6\0"+
    "\2\3\2\0\1\10\3\0\3\10\12\3\1\u012e\13\3"+
    "\11\0\2\10\6\0\2\3\2\0\1\10\3\0\3\10"+
    "\1\u012f\25\3\11\0\2\10\6\0\2\3\2\0\1\10"+
    "\3\0\3\10\11\3\1\u0130\14\3\11\0\2\10\6\0"+
    "\2\3\2\0\1\10\3\0\3\10\7\3\1\u0131\16\3"+
    "\11\0\2\10\6\0\2\3\2\0\1\10\3\0\3\10"+
    "\4\3\1\u0132\21\3\11\0\2\10\6\0\2\3\2\0"+
    "\1\10\3\0\3\10\16\3\1\u0133\7\3\11\0\2\10"+
    "\6\0\2\3\2\0\1\10\3\0\3\10\6\3\1\u0134"+
    "\17\3\11\0\2\10\6\0\2\3\2\0\1\10\3\0"+
    "\3\10\1\3\1\u0135\24\3\11\0\2\10\6\0\2\3"+
    "\2\0\1\10\3\0\3\10\4\3\1\u0136\21\3\11\0"+
    "\2\10\6\0\2\3\2\0\1\10\3\0\3\10\10\3"+
    "\1\u0137\15\3\11\0\2\10\6\0\2\3\2\0\1\10"+
    "\3\0\3\10\4\3\1\u0138\21\3\11\0\2\10\6\0"+
    "\2\3\2\0\1\10\3\0\3\10\1\3\1\u0139\24\3"+
    "\11\0\2\10\6\0\2\3\2\0\1\10\3\0\3\10"+
    "\15\3\1\u013a\10\3\11\0\2\10\6\0\2\3\2\0"+
    "\1\10\3\0\3\10\1\u013b\25\3\11\0\2\10\6\0"+
    "\2\3\2\0\1\10\3\0\3\10\2\3\1\u013c\23\3"+
    "\11\0\2\10\6\0\2\3\2\0\1\10\3\0\3\10"+
    "\2\3\1\u013d\23\3\11\0\2\10\6\0\2\3\2\0"+
    "\1\10\3\0\3\10\13\3\1\u013e\12\3\11\0\2\10"+
    "\6\0\2\3\2\0\1\10\3\0\3\10\4\3\1\u013f"+
    "\21\3\11\0\2\10\6\0\2\3\2\0\1\10\3\0"+
    "\3\10\1\3\1\u0140\24\3\11\0\2\10\6\0\2\3"+
    "\2\0\1\10\3\0\3\10\12\3\1\u0141\13\3\11\0"+
    "\2\10\6\0\2\3\2\0\1\10\3\0\3\10\7\3"+
    "\1\u0142\16\3\11\0\2\10\6\0\2\3\2\0\1\10"+
    "\3\0\3\10\11\3\1\u0143\14\3\11\0\2\10\6\0"+
    "\2\3\2\0\1\10\3\0\3\10\2\3\1\u0144\23\3"+
    "\11\0\2\10\6\0\2\3\2\0\1\10\3\0\3\10"+
    "\6\3\1\u0145\17\3\11\0\2\10\6\0\2\3\2\0"+
    "\1\10\3\0\3\10\1\3\1\u0146\24\3\11\0\2\10"+
    "\6\0\2\3\2\0\1\10\3\0\3\10\1\3\1\u0147"+
    "\24\3\11\0\2\10\6\0\2\3\2\0\1\10\3\0"+
    "\3\10\17\3\1\u0148\6\3\11\0\2\10\6\0\2\3"+
    "\2\0\1\10\3\0\3\10\13\3\1\u0149\12\3\11\0"+
    "\2\10\6\0\2\3\2\0\1\10\3\0\3\10\13\3"+
    "\1\u014a\12\3\11\0\2\10\6\0\2\3\2\0\1\10"+
    "\3\0\3\10\1\3\1\u014b\24\3\11\0\2\10\6\0"+
    "\2\3\2\0\1\10\3\0\3\10\12\3\1\u014c\13\3"+
    "\11\0\2\10\6\0\2\3\2\0\1\10\3\0\3\10"+
    "\4\3\1\u014d\21\3\11\0\2\10\6\0\2\3\2\0"+
    "\1\10\3\0\3\10\15\3\1\u014e\10\3\11\0\2\10"+
    "\6\0\2\3\2\0\1\10\3\0\3\10\15\3\1\u014f"+
    "\10\3\11\0\2\10\6\0\2\3\2\0\1\10\3\0"+
    "\3\10\1\u0150\25\3\11\0\2\10\6\0\2\3\2\0"+
    "\1\10\3\0\3\10\5\3\1\u0151\20\3\11\0\2\10"+
    "\6\0\2\3\2\0\1\10\3\0\3\10\13\3\1\u0152"+
    "\12\3\11\0\2\10\6\0\2\3\2\0\1\10\3\0"+
    "\3\10\5\3\1\u0153\20\3\11\0\2\10\6\0\2\3"+
    "\2\0\1\10\3\0\3\10\4\3\1\u0154\21\3\11\0"+
    "\2\10\6\0\2\3\2\0\1\10\3\0\3\10\24\3"+
    "\1\u0155\1\3\11\0\2\10\6\0\2\3\2\0\1\10"+
    "\3\0\3\10\10\3\1\u0156\15\3\11\0\2\10\6\0"+
    "\2\3\2\0\1\10\3\0\3\10\21\3\1\u0157\4\3"+
    "\11\0\2\10\6\0\2\3\2\0\1\10\3\0\3\10"+
    "\1\u0158\25\3\11\0\2\10\6\0\2\3\2\0\1\10"+
    "\3\0\3\10\6\3\1\u0159\17\3\11\0\2\10\6\0"+
    "\2\3\2\0\1\10\3\0\3\10\17\3\1\u015a\6\3"+
    "\11\0\2\10\6\0\2\3\2\0\1\10\3\0\3\10"+
    "\1\3\1\u015b\24\3\11\0\2\10\6\0\2\3\2\0"+
    "\1\10\3\0\3\10\6\3\1\u015c\17\3\11\0\2\10"+
    "\6\0\2\3\2\0\1\10\3\0\3\10\6\3\1\u015d"+
    "\17\3\11\0\2\10\6\0\2\3\2\0\1\10\3\0"+
    "\3\10\24\3\1\u015e\1\3\11\0\2\10\6\0\2\3"+
    "\2\0\1\10\3\0\3\10\21\3\1\u015f\4\3\11\0"+
    "\2\10\6\0\2\3\2\0\1\10\3\0\3\10\7\3"+
    "\1\u0160\16\3\11\0\2\10\6\0\2\3\2\0\1\10"+
    "\3\0\3\10\10\3\1\u0161\15\3\11\0\2\10\6\0"+
    "\2\3\2\0\1\10\3\0\3\10\7\3\1\u0162\16\3"+
    "\11\0\2\10\6\0\2\3\2\0\1\10\3\0\3\10"+
    "\1\3\1\u0163\24\3\11\0\2\10\6\0\2\3\2\0"+
    "\1\10\3\0\3\10\16\3\1\u0164\7\3\11\0\2\10"+
    "\6\0\2\3\2\0\1\10\3\0\3\10\6\3\1\u0165"+
    "\17\3\11\0\2\10\6\0\2\3\2\0\1\10\3\0"+
    "\3\10\11\3\1\u0166\14\3\11\0\2\10\6\0\2\3"+
    "\2\0\1\10\3\0\3\10\22\3\1\u0167\3\3\11\0"+
    "\2\10\6\0\2\3\2\0\1\10\3\0\3\10\1\3"+
    "\1\u0168\24\3\11\0\2\10\6\0\2\3\2\0\1\10"+
    "\3\0\3\10\13\3\1\u0169\12\3\11\0\2\10\6\0"+
    "\2\3\2\0\1\10\3\0\3\10\21\3\1\u016a\4\3"+
    "\11\0\2\10\6\0\2\3\2\0\1\10\3\0\3\10"+
    "\12\3\1\u016b\13\3\11\0\2\10\6\0\2\3\2\0"+
    "\1\10\3\0\3\10\15\3\1\u016c\10\3\11\0\2\10"+
    "\6\0\2\3\2\0\1\10\3\0\3\10\10\3\1\u016d"+
    "\15\3\11\0\2\10\6\0\2\3\2\0\1\10\3\0"+
    "\3\10\6\3\1\u016e\17\3\11\0\2\10\5\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[15000];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\1\11\2\1\1\11\26\1\6\11\4\1\5\11"+
    "\1\0\1\1\1\0\43\1\4\11\1\1\1\0\1\11"+
    "\u0117\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[366];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;
  
  /** 
   * The number of occupied positions in zzBuffer beyond zzEndRead.
   * When a lead/high surrogate has been read from the input stream
   * into the final zzBuffer position, this will have a value of 1;
   * otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /* user code: */
public String lexema;
int contador;
ArrayList<entradaTS> TablaSimbolos;
ArrayList<Error1> ManejadorDeErrores;

    /* Generamos un java_cup.Symbol para guardar el tipo de token encontrado*/
    private Symbol symbol(int type){
        return new Symbol(type,yyline,yycolumn);
    }
    
    /* Generamos un Symbol para el tipo de token encontrado junto con su valor*/
    private Symbol symbol(int type,Object value){
        return new Symbol(type,yyline,yycolumn,value);
    }


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public AnalizadorLexico(java.io.Reader in) {
  TablaSimbolos= new ArrayList<entradaTS>();
ManejadorDeErrores= new ArrayList<Error1>();
contador=0;
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x110000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 236) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzBuffer.length*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      throw new java.io.IOException("Reader returned 0 characters. See JFlex examples for workaround.");
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      /* If numRead == requested, we might have requested to few chars to
         encode a full Unicode character. We assume that a Reader would
         otherwise never return half characters. */
      if (numRead == requested) {
        if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    zzFinalHighSurrogate = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE)
      zzBuffer = new char[ZZ_BUFFERSIZE];
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() throws java.io.IOException {
    if (!zzEOFDone) {
      zzEOFDone = true;
        //System.out.println("Fin del archivo de codigo");
  yyclose();
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public java_cup.runtime.Symbol next_token() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      boolean zzR = false;
      int zzCh;
      int zzCharCount;
      for (zzCurrentPosL = zzStartRead  ;
           zzCurrentPosL < zzMarkedPosL ;
           zzCurrentPosL += zzCharCount ) {
        zzCh = Character.codePointAt(zzBufferL, zzCurrentPosL, zzMarkedPosL);
        zzCharCount = Character.charCount(zzCh);
        switch (zzCh) {
        case '\u000B':
        case '\u000C':
        case '\u0085':
        case '\u2028':
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn += zzCharCount;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
            zzDoEOF();
          { return new java_cup.runtime.Symbol(sym.EOF); }
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { ManejadorDeErrores.add(new Error1("Lexico",yyline,yycolumn,yytext()));
return symbol(sym.ERRORLEX);
            }
          case 73: break;
          case 2: 
            { TablaSimbolos.add(new entradaTS(yyline, yycolumn, contador++, yytext())); 
return symbol(sym.ID);
            }
          case 74: break;
          case 3: 
            { TablaSimbolos.add(new entradaTS(yyline, yycolumn, contador++, yytext())); 
return symbol(sym.NUM);
            }
          case 75: break;
          case 4: 
            { /*IGNORE*/
            }
          case 76: break;
          case 5: 
            { TablaSimbolos.add(new entradaTS(yyline, yycolumn, contador++, yytext())); 
return symbol(sym.SUBS_OP);
            }
          case 77: break;
          case 6: 
            { TablaSimbolos.add(new entradaTS(yyline, yycolumn, contador++, yytext())); 
return symbol(sym.ASSIG_OP);
            }
          case 78: break;
          case 7: 
            { TablaSimbolos.add(new entradaTS(yyline, yycolumn, contador++, yytext())); 
return symbol(sym.PARENTH1);
            }
          case 79: break;
          case 8: 
            { TablaSimbolos.add(new entradaTS(yyline, yycolumn, contador++, yytext())); 
return symbol(sym.PARENTH2);
            }
          case 80: break;
          case 9: 
            { TablaSimbolos.add(new entradaTS(yyline, yycolumn, contador++, yytext())); 
return symbol(sym.CURLY_BR1);
            }
          case 81: break;
          case 10: 
            { TablaSimbolos.add(new entradaTS(yyline, yycolumn, contador++, yytext())); 
return symbol(sym.CURLY_BR2);
            }
          case 82: break;
          case 11: 
            { TablaSimbolos.add(new entradaTS(yyline, yycolumn, contador++, yytext())); 
return symbol(sym.BRACKET1);
            }
          case 83: break;
          case 12: 
            { TablaSimbolos.add(new entradaTS(yyline, yycolumn, contador++, yytext())); 
return symbol(sym.BRACKET2);
            }
          case 84: break;
          case 13: 
            { TablaSimbolos.add(new entradaTS(yyline, yycolumn, contador++, yytext())); 
return symbol(sym.GREATER_OP);
            }
          case 85: break;
          case 14: 
            { TablaSimbolos.add(new entradaTS(yyline, yycolumn, contador++, yytext())); 
return symbol(sym.LESS_OP);
            }
          case 86: break;
          case 15: 
            { TablaSimbolos.add(new entradaTS(yyline, yycolumn, contador++, yytext())); 
return symbol(sym.OR_OP);
            }
          case 87: break;
          case 16: 
            { TablaSimbolos.add(new entradaTS(yyline, yycolumn, contador++, yytext())); 
return symbol(sym.ADD_OP);
            }
          case 88: break;
          case 17: 
            { TablaSimbolos.add(new entradaTS(yyline, yycolumn, contador++, yytext())); 
return symbol(sym.SEMICOLON_SIGN);
            }
          case 89: break;
          case 18: 
            { TablaSimbolos.add(new entradaTS(yyline, yycolumn, contador++, yytext())); 
return symbol(sym.POINT_SIGN);
            }
          case 90: break;
          case 19: 
            { TablaSimbolos.add(new entradaTS(yyline, yycolumn, contador++, yytext())); 
return symbol(sym.COMMA_SIGN);
            }
          case 91: break;
          case 20: 
            { TablaSimbolos.add(new entradaTS(yyline, yycolumn, contador++, yytext())); 
return symbol(sym.STRING);
            }
          case 92: break;
          case 21: 
            { TablaSimbolos.add(new entradaTS(yyline, yycolumn, contador++, yytext())); 
return symbol(sym.IF);
            }
          case 93: break;
          case 22: 
            { TablaSimbolos.add(new entradaTS(yyline, yycolumn, contador++, yytext())); 
return symbol(sym.EQUAL_OP);
            }
          case 94: break;
          case 23: 
            { TablaSimbolos.add(new entradaTS(yyline, yycolumn, contador++, yytext())); 
return symbol(sym.GREATER_EQUAL_OP);
            }
          case 95: break;
          case 24: 
            { TablaSimbolos.add(new entradaTS(yyline, yycolumn, contador++, yytext())); 
return symbol(sym.LESS_EQUAL_OP);
            }
          case 96: break;
          case 25: 
            { TablaSimbolos.add(new entradaTS(yyline, yycolumn, contador++, yytext())); 
return symbol(sym.NOT_EQUAL_OP);
            }
          case 97: break;
          case 26: 
            { TablaSimbolos.add(new entradaTS(yyline, yycolumn, contador++, yytext())); 
return symbol(sym.AND_OP);
            }
          case 98: break;
          case 27: 
            { TablaSimbolos.add(new entradaTS(yyline, yycolumn, contador++, yytext())); 
return symbol(sym.INT_WORD);
            }
          case 99: break;
          case 28: 
            { TablaSimbolos.add(new entradaTS(yyline, yycolumn, contador++, yytext())); 
return symbol(sym.NOT);
            }
          case 100: break;
          case 29: 
            { TablaSimbolos.add(new entradaTS(yyline, yycolumn, contador++, yytext())); 
return symbol(sym.NEW);
            }
          case 101: break;
          case 30: 
            { TablaSimbolos.add(new entradaTS(yyline, yycolumn, contador++, yytext())); 
return symbol(sym.MIN);
            }
          case 102: break;
          case 31: 
            { TablaSimbolos.add(new entradaTS(yyline, yycolumn, contador++, yytext())); 
return symbol(sym.MAX);
            }
          case 103: break;
          case 32: 
            { TablaSimbolos.add(new entradaTS(yyline, yycolumn, contador++, yytext())); 
return symbol(sym.NODE);
            }
          case 104: break;
          case 33: 
            { TablaSimbolos.add(new entradaTS(yyline, yycolumn, contador++, yytext())); 
return symbol(sym.TRUE);
            }
          case 105: break;
          case 34: 
            { TablaSimbolos.add(new entradaTS(yyline, yycolumn, contador++, yytext())); 
return symbol(sym.LOOP);
            }
          case 106: break;
          case 35: 
            { TablaSimbolos.add(new entradaTS(yyline, yycolumn, contador++, yytext())); 
return symbol(sym.ELSE);
            }
          case 107: break;
          case 36: 
            { TablaSimbolos.add(new entradaTS(yyline, yycolumn, contador++, yytext())); 
return symbol(sym.DARE);
            }
          case 108: break;
          case 37: 
            { TablaSimbolos.add(new entradaTS(yyline, yycolumn, contador++, yytext())); 
return symbol(sym.MAIN);
            }
          case 109: break;
          case 38: 
            { TablaSimbolos.add(new entradaTS(yyline, yycolumn, contador++, yytext())); 
return symbol(sym.BUILD);
            }
          case 110: break;
          case 39: 
            { TablaSimbolos.add(new entradaTS(yyline, yycolumn, contador++, yytext())); 
return symbol(sym.GROUP);
            }
          case 111: break;
          case 40: 
            { TablaSimbolos.add(new entradaTS(yyline, yycolumn, contador++, yytext())); 
return symbol(sym.FALSE);
            }
          case 112: break;
          case 41: 
            { TablaSimbolos.add(new entradaTS(yyline, yycolumn, contador++, yytext())); 
return symbol(sym.STRING_WORD);
            }
          case 113: break;
          case 42: 
            { TablaSimbolos.add(new entradaTS(yyline, yycolumn, contador++, yytext())); 
return symbol(sym.STRESS);
            }
          case 114: break;
          case 43: 
            { TablaSimbolos.add(new entradaTS(yyline, yycolumn, contador++, yytext())); 
return symbol(sym.BOOLEAN_WORD);
            }
          case 115: break;
          case 44: 
            { TablaSimbolos.add(new entradaTS(yyline, yycolumn, contador++, yytext())); 
return symbol(sym.ANXIETY);
            }
          case 116: break;
          case 45: 
            { TablaSimbolos.add(new entradaTS(yyline, yycolumn, contador++, yytext())); 
return symbol(sym.PRINTLN);
            }
          case 117: break;
          case 46: 
            { TablaSimbolos.add(new entradaTS(yyline, yycolumn, contador++, yytext())); 
return symbol(sym.PRIVACY);
            }
          case 118: break;
          case 47: 
            { TablaSimbolos.add(new entradaTS(yyline, yycolumn, contador++, yytext())); 
return symbol(sym.DECLARE);
            }
          case 119: break;
          case 48: 
            { TablaSimbolos.add(new entradaTS(yyline, yycolumn, contador++, yytext())); 
return symbol(sym.FEATURES);
            }
          case 120: break;
          case 49: 
            { TablaSimbolos.add(new entradaTS(yyline, yycolumn, contador++, yytext())); 
return symbol(sym.HARDNESS);
            }
          case 121: break;
          case 50: 
            { TablaSimbolos.add(new entradaTS(yyline, yycolumn, contador++, yytext())); 
return symbol(sym.STABILITY);
            }
          case 122: break;
          case 51: 
            { TablaSimbolos.add(new entradaTS(yyline, yycolumn, contador++, yytext())); 
return symbol(sym.REASONING);
            }
          case 123: break;
          case 52: 
            { TablaSimbolos.add(new entradaTS(yyline, yycolumn, contador++, yytext())); 
return symbol(sym.DOMINANCE);
            }
          case 124: break;
          case 53: 
            { TablaSimbolos.add(new entradaTS(yyline, yycolumn, contador++, yytext())); 
return symbol(sym.LIVELINESS);
            }
          case 125: break;
          case 54: 
            { TablaSimbolos.add(new entradaTS(yyline, yycolumn, contador++, yytext())); 
return symbol(sym.AFFABILITY);
            }
          case 126: break;
          case 55: 
            { TablaSimbolos.add(new entradaTS(yyline, yycolumn, contador++, yytext())); 
return symbol(sym.READSTRING);
            }
          case 127: break;
          case 56: 
            { TablaSimbolos.add(new entradaTS(yyline, yycolumn, contador++, yytext())); 
return symbol(sym.PRINTGRAPH);
            }
          case 128: break;
          case 57: 
            { TablaSimbolos.add(new entradaTS(yyline, yycolumn, contador++, yytext())); 
return symbol(sym.ABSTRACTION);
            }
          case 129: break;
          case 58: 
            { TablaSimbolos.add(new entradaTS(yyline, yycolumn, contador++, yytext())); 
return symbol(sym.ARRAYSTRING);
            }
          case 130: break;
          case 59: 
            { TablaSimbolos.add(new entradaTS(yyline, yycolumn, contador++, yytext())); 
return symbol(sym.SOCIABILITY);
            }
          case 131: break;
          case 60: 
            { TablaSimbolos.add(new entradaTS(yyline, yycolumn, contador++, yytext())); 
return symbol(sym.SENSITIVITY);
            }
          case 132: break;
          case 61: 
            { TablaSimbolos.add(new entradaTS(yyline, yycolumn, contador++, yytext())); 
return symbol(sym.SELFCONTROL);
            }
          case 133: break;
          case 62: 
            { TablaSimbolos.add(new entradaTS(yyline, yycolumn, contador++, yytext())); 
return symbol(sym.READFEATVAL);
            }
          case 134: break;
          case 63: 
            { TablaSimbolos.add(new entradaTS(yyline, yycolumn, contador++, yytext())); 
return symbol(sym.GETFEATURES);
            }
          case 135: break;
          case 64: 
            { TablaSimbolos.add(new entradaTS(yyline, yycolumn, contador++, yytext())); 
return symbol(sym.INDEPENDENCE);
            }
          case 136: break;
          case 65: 
            { TablaSimbolos.add(new entradaTS(yyline, yycolumn, contador++, yytext())); 
return symbol(sym.APPREHESION);
            }
          case 137: break;
          case 66: 
            { TablaSimbolos.add(new entradaTS(yyline, yycolumn, contador++, yytext())); 
return symbol(sym.SURVEILLANCE);
            }
          case 138: break;
          case 67: 
            { TablaSimbolos.add(new entradaTS(yyline, yycolumn, contador++, yytext())); 
return symbol(sym.GENERATEGROUP);
            }
          case 139: break;
          case 68: 
            { TablaSimbolos.add(new entradaTS(yyline, yycolumn, contador++, yytext())); 
return symbol(sym.GETSIMILITUDE);
            }
          case 140: break;
          case 69: 
            { TablaSimbolos.add(new entradaTS(yyline, yycolumn, contador++, yytext())); 
return symbol(sym.PERFECTIONISM);
            }
          case 141: break;
          case 70: 
            { TablaSimbolos.add(new entradaTS(yyline, yycolumn, contador++, yytext())); 
return symbol(sym.SELFSUFFICIENCY);
            }
          case 142: break;
          case 71: 
            { TablaSimbolos.add(new entradaTS(yyline, yycolumn, contador++, yytext())); 
return symbol(sym.CARETOSTANDARDS);
            }
          case 143: break;
          case 72: 
            { TablaSimbolos.add(new entradaTS(yyline, yycolumn, contador++, yytext())); 
return symbol(sym.OPENNESSTOCHANGE);
            }
          case 144: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }


}
