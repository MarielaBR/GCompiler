
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20150930 (SVN rev 66)
//----------------------------------------------------

package analizador;

import java.io.*;
import java.lang.*;
import java_cup.runtime.*;
import java_cup.runtime.Symbol;
import java.util.ArrayList;
import java.util.*;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20150930 (SVN rev 66) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class Asintactico extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public Asintactico() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public Asintactico(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Asintactico(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\313\000\002\002\004\000\002\002\003\000\002\003" +
    "\013\000\002\003\014\000\002\003\013\000\002\003\014" +
    "\000\002\003\015\000\002\004\007\000\002\004\006\000" +
    "\002\004\005\000\002\004\003\000\002\004\007\000\002" +
    "\004\007\000\002\004\007\000\002\004\006\000\002\004" +
    "\005\000\002\004\005\000\002\004\003\000\002\054\006" +
    "\000\002\054\004\000\002\054\004\000\002\054\006\000" +
    "\002\054\006\000\002\054\004\000\002\055\006\000\002" +
    "\055\004\000\002\055\004\000\002\055\006\000\002\055" +
    "\006\000\002\055\004\000\002\010\004\000\002\010\004" +
    "\000\002\010\004\000\002\007\003\000\002\007\003\000" +
    "\002\007\003\000\002\012\003\000\002\012\003\000\002" +
    "\012\003\000\002\012\003\000\002\012\005\000\002\012" +
    "\005\000\002\012\003\000\002\013\003\000\002\013\005" +
    "\000\002\013\003\000\002\013\005\000\002\051\003\000" +
    "\002\051\003\000\002\014\003\000\002\014\003\000\002" +
    "\014\003\000\002\016\003\000\002\016\003\000\002\017" +
    "\003\000\002\017\003\000\002\020\003\000\002\020\003" +
    "\000\002\020\003\000\002\020\003\000\002\020\003\000" +
    "\002\020\003\000\002\015\003\000\002\015\005\000\002" +
    "\015\004\000\002\015\005\000\002\015\005\000\002\015" +
    "\004\000\002\015\004\000\002\015\005\000\002\015\005" +
    "\000\002\015\005\000\002\015\005\000\002\015\005\000" +
    "\002\053\003\000\002\053\005\000\002\053\005\000\002" +
    "\052\003\000\002\052\003\000\002\011\004\000\002\011" +
    "\004\000\002\011\004\000\002\005\004\000\002\005\004" +
    "\000\002\005\004\000\002\005\003\000\002\005\003\000" +
    "\002\022\017\000\002\022\017\000\002\022\017\000\002" +
    "\022\017\000\002\022\017\000\002\022\017\000\002\022" +
    "\017\000\002\022\017\000\002\023\012\000\002\023\012" +
    "\000\002\023\012\000\002\023\012\000\002\023\012\000" +
    "\002\023\012\000\002\023\012\000\002\023\012\000\002" +
    "\030\003\000\002\030\005\000\002\024\013\000\002\031" +
    "\053\000\002\006\004\000\002\006\004\000\002\006\003" +
    "\000\002\021\005\000\002\021\003\000\002\021\005\000" +
    "\002\021\005\000\002\056\005\000\002\056\003\000\002" +
    "\056\005\000\002\056\005\000\002\034\003\000\002\034" +
    "\004\000\002\033\003\000\002\033\003\000\002\033\003" +
    "\000\002\033\003\000\002\033\003\000\002\033\003\000" +
    "\002\033\003\000\002\026\017\000\002\027\003\000\002" +
    "\027\003\000\002\035\004\000\002\035\004\000\002\035" +
    "\004\000\002\035\004\000\002\041\006\000\002\042\006" +
    "\000\002\042\006\000\002\042\006\000\002\042\006\000" +
    "\002\036\004\000\002\036\004\000\002\036\004\000\002" +
    "\036\004\000\002\036\004\000\002\036\004\000\002\043" +
    "\006\000\002\043\006\000\002\043\006\000\002\043\006" +
    "\000\002\044\006\000\002\044\006\000\002\044\006\000" +
    "\002\044\006\000\002\045\006\000\002\045\006\000\002" +
    "\045\006\000\002\045\006\000\002\037\004\000\002\037" +
    "\004\000\002\037\004\000\002\037\004\000\002\046\010" +
    "\000\002\046\010\000\002\046\010\000\002\046\010\000" +
    "\002\046\010\000\002\046\010\000\002\047\010\000\002" +
    "\047\010\000\002\047\010\000\002\047\010\000\002\047" +
    "\010\000\002\047\010\000\002\050\003\000\002\050\003" +
    "\000\002\050\003\000\002\050\003\000\002\050\003\000" +
    "\002\050\003\000\002\050\003\000\002\050\003\000\002" +
    "\050\003\000\002\050\003\000\002\050\003\000\002\050" +
    "\003\000\002\050\003\000\002\050\003\000\002\050\003" +
    "\000\002\050\003\000\002\050\003\000\002\050\003\000" +
    "\002\050\003\000\002\050\003\000\002\050\003\000\002" +
    "\025\003\000\002\025\003\000\002\032\007\000\002\032" +
    "\010\000\002\032\007\000\002\032\007\000\002\040\007" +
    "\000\002\040\007\000\002\040\007" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\u021a\000\004\004\004\001\002\000\006\003\010\005" +
    "\007\001\002\000\004\002\006\001\002\000\004\002\001" +
    "\001\002\000\016\003\021\006\014\011\020\031\023\032" +
    "\015\033\013\001\002\000\020\003\021\005\016\006\014" +
    "\011\020\031\023\032\015\033\013\001\002\000\022\003" +
    "\u020a\011\053\014\052\016\055\051\044\052\051\111\045" +
    "\112\041\001\002\000\004\007\u0204\001\002\000\006\003" +
    "\uffde\011\uffde\001\002\000\004\007\ufff7\001\002\000\006" +
    "\003\uffdf\011\uffdf\001\002\000\016\003\021\006\014\011" +
    "\020\031\023\032\015\033\013\001\002\000\006\003\037" +
    "\011\036\001\002\000\006\003\034\013\035\001\002\000" +
    "\012\007\ufff0\010\032\011\030\013\031\001\002\000\006" +
    "\003\024\010\025\001\002\000\006\003\uffe0\011\uffe0\001" +
    "\002\000\016\003\021\006\014\011\020\031\023\032\015" +
    "\033\013\001\002\000\016\003\021\006\014\011\020\031" +
    "\023\032\015\033\013\001\002\000\004\007\ufff8\001\002" +
    "\000\004\007\ufff2\001\002\000\006\003\uffb0\010\uffb0\001" +
    "\002\000\024\003\uffe1\010\uffe1\011\uffe1\014\uffe1\016\uffe1" +
    "\051\uffe1\052\uffe1\111\uffe1\112\uffe1\001\002\000\016\003" +
    "\021\006\014\011\020\031\023\032\015\033\013\001\002" +
    "\000\004\007\ufff1\001\002\000\024\003\uffe2\010\uffe2\011" +
    "\uffe2\014\uffe2\016\uffe2\051\uffe2\052\uffe2\111\uffe2\112\uffe2" +
    "\001\002\000\024\003\uffe3\010\uffe3\011\uffe3\014\uffe3\016" +
    "\uffe3\051\uffe3\052\uffe3\111\uffe3\112\uffe3\001\002\000\010" +
    "\003\034\010\uffb2\013\035\001\002\000\026\003\065\010" +
    "\uffb1\011\053\013\031\014\052\016\055\051\044\052\051" +
    "\111\045\112\041\001\002\000\022\003\054\011\053\014" +
    "\052\016\055\051\044\052\051\111\045\112\041\001\002" +
    "\000\030\003\uffdd\010\uffdd\015\uffdd\021\uffb3\022\uffb3\023" +
    "\uffb3\024\uffb3\025\uffb3\026\uffb3\027\uffdd\030\uffdd\001\002" +
    "\000\020\003\uffdb\010\uffdb\015\uffdb\017\uffc3\020\uffc3\027" +
    "\uffdb\030\uffdb\001\002\000\014\003\uffdc\010\uffdc\015\uffdc" +
    "\027\uffdc\030\uffdc\001\002\000\020\003\uffd0\010\uffd0\015" +
    "\uffd0\017\uffd0\020\uffd0\027\uffd0\030\uffd0\001\002\000\020" +
    "\003\uffd2\010\uffd2\015\uffd2\027\uffd2\030\uffd2\036\uffd2\044" +
    "\uffd2\001\002\000\016\021\112\022\113\023\117\024\115" +
    "\025\116\026\120\001\002\000\036\003\uffb7\010\uffb7\015" +
    "\uffb7\017\uffb7\020\uffb7\021\uffb7\022\uffb7\023\uffb7\024\uffb7" +
    "\025\uffb7\026\uffb7\027\060\030\062\036\uffb7\001\002\000" +
    "\020\003\110\010\uffda\015\uffda\017\077\020\071\027\uffda" +
    "\030\uffda\001\002\000\020\003\uffcf\010\uffcf\015\uffcf\017" +
    "\uffcf\020\uffcf\027\uffcf\030\uffcf\001\002\000\022\003\065" +
    "\011\053\014\052\016\055\051\044\052\051\111\045\112" +
    "\041\001\002\000\034\003\uffd1\010\uffd1\015\uffd1\017\uffce" +
    "\020\uffce\021\uffb4\022\uffb4\023\uffb4\024\uffb4\025\uffb4\026" +
    "\uffb4\027\uffd1\030\uffd1\001\002\000\032\003\076\010\142" +
    "\011\075\014\074\016\055\017\077\020\071\027\uffd7\030" +
    "\uffd7\051\044\052\051\112\067\001\002\000\020\003\141" +
    "\011\102\014\074\016\055\051\044\052\051\112\067\001" +
    "\002\000\020\003\133\010\uffd6\015\uffd6\027\132\030\uffd6" +
    "\036\uffd6\044\uffd6\001\002\000\012\003\061\010\063\027" +
    "\060\030\062\001\002\000\022\003\uffcd\011\uffcd\014\uffcd" +
    "\016\uffcd\051\uffcd\052\uffcd\111\uffcd\112\uffcd\001\002\000" +
    "\016\003\021\006\014\011\020\031\023\032\015\033\013" +
    "\001\002\000\022\003\uffcc\011\uffcc\014\uffcc\016\uffcc\051" +
    "\uffcc\052\uffcc\111\uffcc\112\uffcc\001\002\000\016\003\021" +
    "\006\014\011\020\031\023\032\015\033\013\001\002\000" +
    "\022\003\065\011\053\014\052\016\055\051\044\052\051" +
    "\111\045\112\041\001\002\000\034\003\076\010\uffd7\011" +
    "\075\014\074\015\uffd7\016\055\017\077\020\071\027\uffd7" +
    "\030\uffd7\051\044\052\051\112\067\001\002\000\014\003" +
    "\uffd8\010\uffd8\015\uffd8\027\060\030\062\001\002\000\036" +
    "\003\uffb3\010\uffb3\015\uffb3\017\uffb3\020\uffb3\021\uffb3\022" +
    "\uffb3\023\uffb3\024\uffb3\025\uffb3\026\uffb3\027\uffb3\030\uffb3" +
    "\036\uffb3\001\002\000\020\003\uffc3\010\uffc3\015\uffc3\017" +
    "\uffc3\020\uffc3\027\uffc3\030\uffc3\001\002\000\020\003\uffca" +
    "\011\uffca\014\uffca\016\uffca\051\uffca\052\uffca\112\uffca\001" +
    "\002\000\020\003\076\011\102\014\074\016\055\051\044" +
    "\052\051\112\067\001\002\000\012\003\110\015\126\017" +
    "\077\020\071\001\002\000\020\003\076\011\102\014\074" +
    "\016\055\051\044\052\051\112\067\001\002\000\034\003" +
    "\uffce\010\uffbe\015\uffce\017\uffce\020\uffce\021\uffb4\022\uffb4" +
    "\023\uffb4\024\uffb4\025\uffb4\026\uffb4\027\uffbe\030\uffbe\001" +
    "\002\000\024\003\076\011\075\014\074\016\055\017\077" +
    "\020\071\051\044\052\051\112\067\001\002\000\020\003" +
    "\uffcb\011\uffcb\014\uffcb\016\uffcb\051\uffcb\052\uffcb\112\uffcb" +
    "\001\002\000\020\015\121\021\112\022\113\023\117\024" +
    "\115\025\116\026\120\001\002\000\012\003\103\015\104" +
    "\017\077\020\071\001\002\000\034\003\uffce\010\uffce\015" +
    "\uffce\017\uffce\020\uffce\021\uffb4\022\uffb4\023\uffb4\024\uffb4" +
    "\025\uffb4\026\uffb4\027\uffce\030\uffce\001\002\000\034\003" +
    "\076\010\uffb8\011\102\014\074\015\uffb8\016\055\017\uffb8" +
    "\020\uffb8\027\uffb8\030\uffb8\051\044\052\051\112\067\001" +
    "\002\000\020\003\uffc0\010\uffc0\015\uffc0\017\uffc0\020\uffc0" +
    "\027\uffc0\030\uffc0\001\002\000\020\003\107\011\102\014" +
    "\074\016\055\051\044\052\051\112\067\001\002\000\020" +
    "\003\110\010\uffc2\015\uffc2\017\077\020\071\027\uffc2\030" +
    "\uffc2\001\002\000\034\003\076\010\uffbb\011\075\014\074" +
    "\015\uffbb\016\055\017\077\020\071\027\uffbb\030\uffbb\051" +
    "\044\052\051\112\067\001\002\000\020\003\076\011\102" +
    "\014\074\016\055\051\044\052\051\112\067\001\002\000" +
    "\020\003\110\010\uffba\015\uffba\017\077\020\071\027\uffba" +
    "\030\uffba\001\002\000\010\011\uffc9\014\uffc9\112\uffc9\001" +
    "\002\000\010\011\uffc8\014\uffc8\112\uffc8\001\002\000\010" +
    "\011\122\014\124\112\067\001\002\000\010\011\uffc6\014" +
    "\uffc6\112\uffc6\001\002\000\010\011\uffc5\014\uffc5\112\uffc5" +
    "\001\002\000\010\011\uffc7\014\uffc7\112\uffc7\001\002\000" +
    "\010\011\uffc4\014\uffc4\112\uffc4\001\002\000\036\003\uffb6" +
    "\010\uffb6\015\uffb6\017\uffb6\020\uffb6\021\uffb6\022\uffb6\023" +
    "\uffb6\024\uffb6\025\uffb6\026\uffb6\027\uffb6\030\uffb6\036\uffb6" +
    "\001\002\000\036\003\uffb4\010\uffb4\015\uffb4\017\uffb4\020" +
    "\uffb4\021\uffb4\022\uffb4\023\uffb4\024\uffb4\025\uffb4\026\uffb4" +
    "\027\uffb4\030\uffb4\036\uffb4\001\002\000\020\003\uffbf\010" +
    "\uffbf\015\uffbf\017\uffbf\020\uffbf\027\uffbf\030\uffbf\001\002" +
    "\000\010\011\122\014\124\112\067\001\002\000\004\015" +
    "\121\001\002\000\020\003\uffb9\010\uffb9\015\uffb9\017\uffb9" +
    "\020\uffb9\027\uffb9\030\uffb9\001\002\000\020\003\110\010" +
    "\uffbc\015\uffbc\017\077\020\071\027\uffbc\030\uffbc\001\002" +
    "\000\004\007\ufffa\001\002\000\004\007\ufff6\001\002\000" +
    "\010\003\135\011\134\111\045\001\002\000\010\003\135" +
    "\011\134\111\045\001\002\000\020\003\uffd1\010\uffd1\015" +
    "\uffd1\027\uffd1\030\uffd1\036\uffd1\044\uffd1\001\002\000\020" +
    "\003\uffd4\010\uffd4\015\uffd4\027\uffd4\030\uffd4\036\uffd4\044" +
    "\uffd4\001\002\000\020\003\uffd3\010\uffd3\015\uffd3\027\uffd3" +
    "\030\uffd3\036\uffd3\044\uffd3\001\002\000\020\003\uffd5\010" +
    "\uffd5\015\uffd5\027\uffd5\030\uffd5\036\uffd5\044\uffd5\001\002" +
    "\000\020\003\110\010\uffc1\015\uffc1\017\077\020\071\027" +
    "\uffc1\030\uffc1\001\002\000\034\003\076\010\uffbd\011\075" +
    "\014\074\015\uffbd\016\055\017\077\020\071\027\uffbd\030" +
    "\uffbd\051\044\052\051\112\067\001\002\000\016\003\021" +
    "\006\014\011\020\031\023\032\015\033\013\001\002\000" +
    "\004\007\ufff4\001\002\000\016\003\103\015\104\017\077" +
    "\020\071\027\uffda\030\uffda\001\002\000\010\015\146\027" +
    "\060\030\062\001\002\000\014\003\uffd9\010\uffd9\015\uffd9" +
    "\027\uffd9\030\uffd9\001\002\000\006\011\122\112\067\001" +
    "\002\000\036\003\uffb5\010\uffb5\015\uffb5\017\uffb5\020\uffb5" +
    "\021\uffb5\022\uffb5\023\uffb5\024\uffb5\025\uffb5\026\uffb5\027" +
    "\uffb5\030\uffb5\036\uffb5\001\002\000\010\010\152\027\060" +
    "\030\062\001\002\000\016\003\021\006\014\011\020\031" +
    "\023\032\015\033\013\001\002\000\004\007\ufff5\001\002" +
    "\000\004\007\155\001\002\000\006\003\157\005\156\001" +
    "\002\000\014\003\171\006\170\041\164\042\167\101\162" +
    "\001\002\000\004\005\160\001\002\000\014\003\171\006" +
    "\170\041\164\042\167\101\162\001\002\000\014\003\171" +
    "\006\170\041\164\042\167\101\162\001\002\000\006\003" +
    "\u01e2\011\u01e1\001\002\000\004\012\366\001\002\000\006" +
    "\003\301\011\300\001\002\000\014\003\171\006\170\041" +
    "\164\042\167\101\162\001\002\000\014\003\171\006\170" +
    "\041\164\042\167\101\162\001\002\000\004\011\215\001" +
    "\002\000\004\012\uffac\001\002\000\006\011\172\012\uffab" +
    "\001\002\000\004\013\173\001\002\000\004\035\174\001" +
    "\002\000\006\041\175\043\176\001\002\000\004\014\205" +
    "\001\002\000\010\003\135\011\134\111\045\001\002\000" +
    "\004\044\203\001\002\000\010\003\uff9a\036\201\044\uff9a" +
    "\001\002\000\010\003\135\011\134\111\045\001\002\000" +
    "\006\003\uff99\044\uff99\001\002\000\004\010\204\001\002" +
    "\000\014\003\uffa1\006\uffa1\041\uffa1\042\uffa1\101\uffa1\001" +
    "\002\000\004\011\206\001\002\000\004\036\207\001\002" +
    "\000\010\003\135\011\134\111\045\001\002\000\004\036" +
    "\211\001\002\000\010\003\135\011\134\111\045\001\002" +
    "\000\004\015\213\001\002\000\004\010\214\001\002\000" +
    "\014\003\uffa9\006\uffa9\041\uffa9\042\uffa9\101\uffa9\001\002" +
    "\000\004\013\216\001\002\000\004\035\217\001\002\000" +
    "\004\042\220\001\002\000\004\014\221\001\002\000\010" +
    "\011\122\014\124\112\067\001\002\000\004\015\274\001" +
    "\002\000\004\036\224\001\002\000\010\011\122\014\124" +
    "\112\067\001\002\000\004\036\226\001\002\000\010\011" +
    "\122\014\124\112\067\001\002\000\004\036\230\001\002" +
    "\000\010\011\122\014\124\112\067\001\002\000\004\036" +
    "\232\001\002\000\010\011\122\014\124\112\067\001\002" +
    "\000\004\036\234\001\002\000\010\011\122\014\124\112" +
    "\067\001\002\000\004\036\236\001\002\000\010\011\122" +
    "\014\124\112\067\001\002\000\004\036\240\001\002\000" +
    "\010\011\122\014\124\112\067\001\002\000\004\036\242" +
    "\001\002\000\010\011\122\014\124\112\067\001\002\000" +
    "\004\036\244\001\002\000\010\011\122\014\124\112\067" +
    "\001\002\000\004\036\246\001\002\000\010\011\122\014" +
    "\124\112\067\001\002\000\004\036\250\001\002\000\010" +
    "\011\122\014\124\112\067\001\002\000\004\036\252\001" +
    "\002\000\010\011\122\014\124\112\067\001\002\000\004" +
    "\036\254\001\002\000\010\011\122\014\124\112\067\001" +
    "\002\000\004\036\256\001\002\000\010\011\122\014\124" +
    "\112\067\001\002\000\004\036\260\001\002\000\010\011" +
    "\122\014\124\112\067\001\002\000\004\036\262\001\002" +
    "\000\010\011\122\014\124\112\067\001\002\000\004\036" +
    "\264\001\002\000\010\011\122\014\124\112\067\001\002" +
    "\000\004\036\266\001\002\000\010\011\122\014\124\112" +
    "\067\001\002\000\004\036\270\001\002\000\010\011\122" +
    "\014\124\112\067\001\002\000\004\036\272\001\002\000" +
    "\010\011\122\014\124\112\067\001\002\000\004\015\uff97" +
    "\001\002\000\004\010\275\001\002\000\014\003\uff98\006" +
    "\uff98\041\uff98\042\uff98\101\uff98\001\002\000\004\012\uffae" +
    "\001\002\000\004\012\uffad\001\002\000\006\003\315\013" +
    "\316\001\002\000\004\013\302\001\002\000\004\035\303" +
    "\001\002\000\004\041\304\001\002\000\004\014\305\001" +
    "\002\000\004\011\306\001\002\000\004\036\307\001\002" +
    "\000\010\003\135\011\134\111\045\001\002\000\004\036" +
    "\311\001\002\000\010\003\135\011\134\111\045\001\002" +
    "\000\004\015\313\001\002\000\004\010\314\001\002\000" +
    "\014\003\uffa8\006\uffa8\041\uffa8\042\uffa8\101\uffa8\001\002" +
    "\000\004\035\354\001\002\000\004\035\317\001\002\000" +
    "\004\041\320\001\002\000\006\003\321\014\322\001\002" +
    "\000\004\011\345\001\002\000\004\011\323\001\002\000" +
    "\006\003\324\036\325\001\002\000\010\003\135\011\134" +
    "\111\045\001\002\000\010\003\135\011\134\111\045\001" +
    "\002\000\006\003\327\036\330\001\002\000\010\003\135" +
    "\011\134\111\045\001\002\000\010\003\135\011\134\111" +
    "\045\001\002\000\004\015\332\001\002\000\006\003\333" +
    "\010\334\001\002\000\014\003\uffa3\006\uffa3\041\uffa3\042" +
    "\uffa3\101\uffa3\001\002\000\014\003\uffaa\006\uffaa\041\uffaa" +
    "\042\uffaa\101\uffaa\001\002\000\004\015\336\001\002\000" +
    "\004\010\337\001\002\000\014\003\uffa4\006\uffa4\041\uffa4" +
    "\042\uffa4\101\uffa4\001\002\000\004\036\341\001\002\000" +
    "\010\003\135\011\134\111\045\001\002\000\004\015\343" +
    "\001\002\000\004\010\344\001\002\000\014\003\uffa5\006" +
    "\uffa5\041\uffa5\042\uffa5\101\uffa5\001\002\000\004\036\346" +
    "\001\002\000\010\003\135\011\134\111\045\001\002\000" +
    "\004\036\350\001\002\000\010\003\135\011\134\111\045" +
    "\001\002\000\004\015\352\001\002\000\004\010\353\001" +
    "\002\000\014\003\uffa6\006\uffa6\041\uffa6\042\uffa6\101\uffa6" +
    "\001\002\000\004\041\355\001\002\000\004\014\356\001" +
    "\002\000\004\011\357\001\002\000\004\036\360\001\002" +
    "\000\010\003\135\011\134\111\045\001\002\000\004\036" +
    "\362\001\002\000\010\003\135\011\134\111\045\001\002" +
    "\000\004\015\364\001\002\000\004\010\365\001\002\000" +
    "\014\003\uffa7\006\uffa7\041\uffa7\042\uffa7\101\uffa7\001\002" +
    "\000\004\005\367\001\002\000\044\003\u010f\005\u0108\006" +
    "\u0107\011\020\031\023\032\015\033\013\034\u010c\045\u010a" +
    "\047\u0109\050\u0112\053\u010e\054\u0113\055\u0111\056\376\057" +
    "\u0106\102\u0104\001\002\000\046\003\uff89\005\uff89\006\uff89" +
    "\011\uff89\031\uff89\032\uff89\033\uff89\034\uff89\045\uff89\046" +
    "\uff89\047\uff89\050\uff89\053\uff89\054\uff89\055\uff89\056\uff89" +
    "\057\uff89\102\uff89\001\002\000\046\003\uff88\005\uff88\006" +
    "\uff88\011\uff88\031\uff88\032\uff88\033\uff88\034\uff88\045\uff88" +
    "\046\uff88\047\uff88\050\uff88\053\uff88\054\uff88\055\uff88\056" +
    "\uff88\057\uff88\102\uff88\001\002\000\004\010\u01e0\001\002" +
    "\000\046\003\uff86\005\uff86\006\uff86\011\uff86\031\uff86\032" +
    "\uff86\033\uff86\034\uff86\045\uff86\046\uff86\047\uff86\050\uff86" +
    "\053\uff86\054\uff86\055\uff86\056\uff86\057\uff86\102\uff86\001" +
    "\002\000\044\003\u010f\005\u0108\006\u0107\011\020\031\023" +
    "\032\015\033\013\034\u010c\045\u010a\047\u0109\050\u0112\053" +
    "\u010e\054\u0113\055\u0111\056\376\057\u0106\102\u0104\001\002" +
    "\000\006\003\u01dd\010\u01de\001\002\000\006\003\u01c9\014" +
    "\u01ca\001\002\000\046\003\uff3e\005\uff3e\006\uff3e\011\uff3e" +
    "\031\uff3e\032\uff3e\033\uff3e\034\uff3e\045\uff3e\046\uff3e\047" +
    "\uff3e\050\uff3e\053\uff3e\054\uff3e\055\uff3e\056\uff3e\057\uff3e" +
    "\102\uff3e\001\002\000\004\002\ufffb\001\002\000\006\003" +
    "\u01c7\010\u01c8\001\002\000\046\003\uff87\005\uff87\006\uff87" +
    "\011\uff87\031\uff87\032\uff87\033\uff87\034\uff87\045\uff87\046" +
    "\uff87\047\uff87\050\uff87\053\uff87\054\uff87\055\uff87\056\uff87" +
    "\057\uff87\102\uff87\001\002\000\006\003\u01bf\011\036\001" +
    "\002\000\006\003\u01b6\014\u01b7\001\002\000\006\003\u01b4" +
    "\010\u01b5\001\002\000\006\003\u018b\014\u018c\001\002\000" +
    "\004\002\uff94\001\002\000\040\003\u013a\011\020\031\023" +
    "\032\015\033\013\034\u010c\045\u010a\047\u0109\050\u0112\053" +
    "\u010e\054\u0113\055\u0111\056\376\057\u0106\102\u0104\001\002" +
    "\000\006\003\u017e\014\u017f\001\002\000\006\003\u0166\014" +
    "\u0167\001\002\000\006\003\u0164\010\u0165\001\002\000\004" +
    "\011\u0156\001\002\000\006\003\u0154\010\u0155\001\002\000" +
    "\006\003\u014b\014\u014c\001\002\000\050\003\u013a\005\uff83" +
    "\006\uff83\010\u013b\011\u0139\013\031\031\023\032\015\033" +
    "\013\034\u010c\045\u010a\047\u0109\050\u0112\053\u010e\054\u0113" +
    "\055\u0111\056\376\057\u0106\102\u0104\001\002\000\046\003" +
    "\uff3f\005\uff3f\006\uff3f\011\uff3f\031\uff3f\032\uff3f\033\uff3f" +
    "\034\uff3f\045\uff3f\046\uff3f\047\uff3f\050\uff3f\053\uff3f\054" +
    "\uff3f\055\uff3f\056\uff3f\057\uff3f\102\uff3f\001\002\000\006" +
    "\003\u012d\014\u012e\001\002\000\004\014\u012a\001\002\000" +
    "\006\003\u0121\014\u0122\001\002\000\006\003\u011f\010\u0120" +
    "\001\002\000\044\003\u010f\005\u0108\006\u0107\011\020\031" +
    "\023\032\015\033\013\034\u010c\045\u010a\047\u0109\050\u0112" +
    "\053\u010e\054\u0113\055\u0111\056\376\057\u0106\102\u0104\001" +
    "\002\000\004\010\u011d\001\002\000\044\003\uff92\005\uff92" +
    "\006\uff92\011\uff92\031\uff92\032\uff92\033\uff92\034\uff92\045" +
    "\uff92\047\uff92\050\uff92\053\uff92\054\uff92\055\uff92\056\uff92" +
    "\057\uff92\102\uff92\001\002\000\006\003\u011b\010\u011c\001" +
    "\002\000\046\003\uff84\005\uff84\006\uff84\011\uff84\031\uff84" +
    "\032\uff84\033\uff84\034\uff84\045\uff84\046\uff84\047\uff84\050" +
    "\uff84\053\uff84\054\uff84\055\uff84\056\uff84\057\uff84\102\uff84" +
    "\001\002\000\046\003\uff85\005\uff85\006\uff85\011\uff85\031" +
    "\uff85\032\uff85\033\uff85\034\uff85\045\uff85\046\uff85\047\uff85" +
    "\050\uff85\053\uff85\054\uff85\055\uff85\056\uff85\057\uff85\102" +
    "\uff85\001\002\000\046\003\uff72\005\uff72\006\uff72\011\uff72" +
    "\031\uff72\032\uff72\033\uff72\034\uff72\045\uff72\046\uff72\047" +
    "\uff72\050\uff72\053\uff72\054\uff72\055\uff72\056\uff72\057\uff72" +
    "\102\uff72\001\002\000\046\003\uff75\005\uff75\006\uff75\011" +
    "\uff75\031\uff75\032\uff75\033\uff75\034\uff75\045\uff75\046\uff75" +
    "\047\uff75\050\uff75\053\uff75\054\uff75\055\uff75\056\uff75\057" +
    "\uff75\102\uff75\001\002\000\044\003\uffee\005\uffee\006\uffee" +
    "\011\uffee\031\uffee\032\uffee\033\uffee\034\uffee\045\uffee\047" +
    "\uffee\050\uffee\053\uffee\054\uffee\055\uffee\056\uffee\057\uffee" +
    "\102\uffee\001\002\000\004\002\uff95\001\002\000\046\003" +
    "\uff71\005\uff71\006\uff71\011\uff71\031\uff71\032\uff71\033\uff71" +
    "\034\uff71\045\uff71\046\uff71\047\uff71\050\uff71\053\uff71\054" +
    "\uff71\055\uff71\056\uff71\057\uff71\102\uff71\001\002\000\046" +
    "\003\uff74\005\uff74\006\uff74\011\uff74\031\uff74\032\uff74\033" +
    "\uff74\034\uff74\045\uff74\046\uff74\047\uff74\050\uff74\053\uff74" +
    "\054\uff74\055\uff74\056\uff74\057\uff74\102\uff74\001\002\000" +
    "\004\011\u0128\001\002\000\006\003\u0124\011\u0123\001\002" +
    "\000\006\003\u0126\015\u0127\001\002\000\004\015\u0125\001" +
    "\002\000\006\003\uff69\010\uff69\001\002\000\006\003\uff6a" +
    "\010\uff6a\001\002\000\006\003\uff6c\010\uff6c\001\002\000" +
    "\004\015\u0129\001\002\000\006\003\uff6b\010\uff6b\001\002" +
    "\000\006\011\122\112\067\001\002\000\004\015\u012c\001" +
    "\002\000\006\003\uff7b\010\uff7b\001\002\000\004\011\u0134" +
    "\001\002\000\006\003\u0130\011\u012f\001\002\000\006\003" +
    "\u0132\015\u0133\001\002\000\004\015\u0131\001\002\000\006" +
    "\003\uff65\010\uff65\001\002\000\006\003\uff66\010\uff66\001" +
    "\002\000\006\003\uff68\010\uff68\001\002\000\004\015\u0135" +
    "\001\002\000\006\003\uff67\010\uff67\001\002\000\004\010" +
    "\u014a\001\002\000\006\003\u0142\011\036\001\002\000\042" +
    "\003\u013a\006\u0141\011\020\031\023\032\015\033\013\034" +
    "\u010c\045\u010a\047\u0109\050\u0112\053\u010e\054\u0113\055\u0111" +
    "\056\376\057\u0106\102\u0104\001\002\000\010\003\034\010" +
    "\uffb0\013\035\001\002\000\046\003\uff83\006\uff83\010\u013f" +
    "\011\030\013\031\031\uff83\032\uff83\033\uff83\034\uff83\045" +
    "\uff83\047\uff83\050\uff83\053\uff83\054\uff83\055\uff83\056\uff83" +
    "\057\uff83\102\uff83\001\002\000\044\003\uffea\005\uffea\006" +
    "\uffea\011\uffea\031\uffea\032\uffea\033\uffea\034\uffea\045\uffea" +
    "\047\uffea\050\uffea\053\uffea\054\uffea\055\uffea\056\uffea\057" +
    "\uffea\102\uffea\001\002\000\004\010\u013e\001\002\000\042" +
    "\003\uff8b\006\uff8b\011\uff8b\031\uff8b\032\uff8b\033\uff8b\034" +
    "\uff8b\045\uff8b\047\uff8b\050\uff8b\053\uff8b\054\uff8b\055\uff8b" +
    "\056\uff8b\057\uff8b\102\uff8b\001\002\000\046\003\uffe8\005" +
    "\uffe8\006\uffe8\011\uffe8\031\uffe8\032\uffe8\033\uffe8\034\uffe8" +
    "\045\uffe8\046\uffe8\047\uffe8\050\uffe8\053\uffe8\054\uffe8\055" +
    "\uffe8\056\uffe8\057\uffe8\102\uffe8\001\002\000\046\003\uffe4" +
    "\005\uffe4\006\uffe4\011\uffe4\031\uffe4\032\uffe4\033\uffe4\034" +
    "\uffe4\045\uffe4\046\uffe4\047\uffe4\050\uffe4\053\uffe4\054\uffe4" +
    "\055\uffe4\056\uffe4\057\uffe4\102\uffe4\001\002\000\042\003" +
    "\uff8a\006\uff8a\011\uff8a\031\uff8a\032\uff8a\033\uff8a\034\uff8a" +
    "\045\uff8a\047\uff8a\050\uff8a\053\uff8a\054\uff8a\055\uff8a\056" +
    "\uff8a\057\uff8a\102\uff8a\001\002\000\044\003\uff91\005\uff91" +
    "\006\uff91\011\uff91\031\uff91\032\uff91\033\uff91\034\uff91\045" +
    "\uff91\047\uff91\050\uff91\053\uff91\054\uff91\055\uff91\056\uff91" +
    "\057\uff91\102\uff91\001\002\000\026\003\065\010\uffb1\011" +
    "\053\013\031\014\052\016\055\051\044\052\051\111\045" +
    "\112\041\001\002\000\022\003\u0144\011\053\014\052\016" +
    "\055\051\044\052\051\111\045\112\041\001\002\000\032" +
    "\003\076\010\u0147\011\075\014\074\016\055\017\077\020" +
    "\071\027\uffd7\030\uffd7\051\044\052\051\112\067\001\002" +
    "\000\010\010\u0146\027\060\030\062\001\002\000\046\003" +
    "\uffe9\005\uffe9\006\uffe9\011\uffe9\031\uffe9\032\uffe9\033\uffe9" +
    "\034\uffe9\045\uffe9\046\uffe9\047\uffe9\050\uffe9\053\uffe9\054" +
    "\uffe9\055\uffe9\056\uffe9\057\uffe9\102\uffe9\001\002\000\046" +
    "\003\uffe6\005\uffe6\006\uffe6\011\uffe6\031\uffe6\032\uffe6\033" +
    "\uffe6\034\uffe6\045\uffe6\046\uffe6\047\uffe6\050\uffe6\053\uffe6" +
    "\054\uffe6\055\uffe6\056\uffe6\057\uffe6\102\uffe6\001\002\000" +
    "\010\010\u0149\027\060\030\062\001\002\000\046\003\uffe5" +
    "\005\uffe5\006\uffe5\011\uffe5\031\uffe5\032\uffe5\033\uffe5\034" +
    "\uffe5\045\uffe5\046\uffe5\047\uffe5\050\uffe5\053\uffe5\054\uffe5" +
    "\055\uffe5\056\uffe5\057\uffe5\102\uffe5\001\002\000\046\003" +
    "\uffe7\005\uffe7\006\uffe7\011\uffe7\031\uffe7\032\uffe7\033\uffe7" +
    "\034\uffe7\045\uffe7\046\uffe7\047\uffe7\050\uffe7\053\uffe7\054" +
    "\uffe7\055\uffe7\056\uffe7\057\uffe7\102\uffe7\001\002\000\010" +
    "\003\135\011\134\111\045\001\002\000\010\003\u014d\011" +
    "\134\111\045\001\002\000\006\003\uffd4\015\u0151\001\002" +
    "\000\006\003\u014f\015\u0150\001\002\000\006\003\uff78\010" +
    "\uff78\001\002\000\006\003\uff7a\010\uff7a\001\002\000\006" +
    "\003\uff77\010\uff77\001\002\000\004\015\u0153\001\002\000" +
    "\006\003\uff79\010\uff79\001\002\000\046\003\uff62\005\uff62" +
    "\006\uff62\011\uff62\031\uff62\032\uff62\033\uff62\034\uff62\045" +
    "\uff62\046\uff62\047\uff62\050\uff62\053\uff62\054\uff62\055\uff62" +
    "\056\uff62\057\uff62\102\uff62\001\002\000\046\003\uff64\005" +
    "\uff64\006\uff64\011\uff64\031\uff64\032\uff64\033\uff64\034\uff64" +
    "\045\uff64\046\uff64\047\uff64\050\uff64\053\uff64\054\uff64\055" +
    "\uff64\056\uff64\057\uff64\102\uff64\001\002\000\004\013\u0157" +
    "\001\002\000\004\035\u0158\001\002\000\004\034\u0159\001" +
    "\002\000\004\014\u015a\001\002\000\004\011\u015b\001\002" +
    "\000\004\036\u015c\001\002\000\006\037\u015e\040\u015d\001" +
    "\002\000\004\036\uff80\001\002\000\004\036\uff81\001\002" +
    "\000\004\036\u0160\001\002\000\004\011\u0161\001\002\000" +
    "\004\015\u0162\001\002\000\004\010\u0163\001\002\000\046" +
    "\003\uff82\005\uff82\006\uff82\011\uff82\031\uff82\032\uff82\033" +
    "\uff82\034\uff82\045\uff82\046\uff82\047\uff82\050\uff82\053\uff82" +
    "\054\uff82\055\uff82\056\uff82\057\uff82\102\uff82\001\002\000" +
    "\046\003\uff61\005\uff61\006\uff61\011\uff61\031\uff61\032\uff61" +
    "\033\uff61\034\uff61\045\uff61\046\uff61\047\uff61\050\uff61\053" +
    "\uff61\054\uff61\055\uff61\056\uff61\057\uff61\102\uff61\001\002" +
    "\000\046\003\uff63\005\uff63\006\uff63\011\uff63\031\uff63\032" +
    "\uff63\033\uff63\034\uff63\045\uff63\046\uff63\047\uff63\050\uff63" +
    "\053\uff63\054\uff63\055\uff63\056\uff63\057\uff63\102\uff63\001" +
    "\002\000\020\003\076\011\102\014\074\016\055\051\044" +
    "\052\051\112\067\001\002\000\020\003\076\011\102\014" +
    "\074\016\055\051\044\052\051\112\067\001\002\000\012" +
    "\003\u0169\015\u016a\017\077\020\071\001\002\000\054\003" +
    "\u0176\005\u016b\011\u0175\014\074\016\055\031\023\032\015" +
    "\033\013\034\u010c\045\u010a\047\u0109\050\u0112\051\044\052" +
    "\051\053\u010e\054\u0113\055\u0111\056\376\057\u0106\102\u0104" +
    "\112\067\001\002\000\042\003\u016c\005\u016b\011\020\031" +
    "\023\032\015\033\013\034\u010c\045\u010a\047\u0109\050\u0112" +
    "\053\u010e\054\u0113\055\u0111\056\376\057\u0106\102\u0104\001" +
    "\002\000\040\003\u013a\011\020\031\023\032\015\033\013" +
    "\034\u010c\045\u010a\047\u0109\050\u0112\053\u010e\054\u0113\055" +
    "\u0111\056\376\057\u0106\102\u0104\001\002\000\052\003\u013a" +
    "\005\uff83\006\uff83\010\u013f\011\u0139\013\031\031\023\032" +
    "\015\033\013\034\u010c\045\u010a\046\uff83\047\u0109\050\u0112" +
    "\053\u010e\054\u0113\055\u0111\056\376\057\u0106\102\u0104\001" +
    "\002\000\046\003\uff8e\005\uff8e\006\uff8e\011\uff8e\031\uff8e" +
    "\032\uff8e\033\uff8e\034\uff8e\045\uff8e\046\uff8e\047\uff8e\050" +
    "\uff8e\053\uff8e\054\uff8e\055\uff8e\056\uff8e\057\uff8e\102\uff8e" +
    "\001\002\000\046\003\uff3d\005\uff3d\006\uff3d\011\uff3d\031" +
    "\uff3d\032\uff3d\033\uff3d\034\uff3d\045\uff3d\046\uff3d\047\uff3d" +
    "\050\uff3d\053\uff3d\054\uff3d\055\uff3d\056\uff3d\057\uff3d\102" +
    "\uff3d\001\002\000\046\003\uff3c\005\uff3c\006\uff3c\011\uff3c" +
    "\031\uff3c\032\uff3c\033\uff3c\034\uff3c\045\uff3c\046\uff3c\047" +
    "\uff3c\050\uff3c\053\uff3c\054\uff3c\055\uff3c\056\uff3c\057\uff3c" +
    "\102\uff3c\001\002\000\042\003\u013a\006\u0171\011\020\031" +
    "\023\032\015\033\013\034\u010c\045\u010a\047\u0109\050\u0112" +
    "\053\u010e\054\u0113\055\u0111\056\376\057\u0106\102\u0104\001" +
    "\002\000\046\003\uff8d\005\uff8d\006\uff8d\011\uff8d\031\uff8d" +
    "\032\uff8d\033\uff8d\034\uff8d\045\uff8d\046\uff8d\047\uff8d\050" +
    "\uff8d\053\uff8d\054\uff8d\055\uff8d\056\uff8d\057\uff8d\102\uff8d" +
    "\001\002\000\042\003\u0173\006\u0174\011\020\031\023\032" +
    "\015\033\013\034\u010c\045\u010a\047\u0109\050\u0112\053\u010e" +
    "\054\u0113\055\u0111\056\376\057\u0106\102\u0104\001\002\000" +
    "\052\003\uff8c\005\uff8c\006\uff8c\010\u013f\011\030\013\031" +
    "\031\uff8c\032\uff8c\033\uff8c\034\uff8c\045\uff8c\046\uff8c\047" +
    "\uff8c\050\uff8c\053\uff8c\054\uff8c\055\uff8c\056\uff8c\057\uff8c" +
    "\102\uff8c\001\002\000\046\003\uff8f\005\uff8f\006\uff8f\011" +
    "\uff8f\031\uff8f\032\uff8f\033\uff8f\034\uff8f\045\uff8f\046\uff8f" +
    "\047\uff8f\050\uff8f\053\uff8f\054\uff8f\055\uff8f\056\uff8f\057" +
    "\uff8f\102\uff8f\001\002\000\034\003\034\013\035\015\uffce" +
    "\017\uffce\020\uffce\021\uffb4\022\uffb4\023\uffb4\024\uffb4\025" +
    "\uffb4\026\uffb4\027\uffb4\030\uffb4\001\002\000\070\003\u0179" +
    "\005\uff83\006\uff83\010\u013f\011\u0178\013\031\014\074\016" +
    "\055\017\077\020\071\031\023\032\015\033\013\034\u010c" +
    "\045\u010a\046\uff83\047\u0109\050\u0112\051\044\052\051\053" +
    "\u010e\054\u0113\055\u0111\056\376\057\u0106\102\u0104\112\067" +
    "\001\002\000\046\003\uff3a\005\uff3a\006\uff3a\011\uff3a\031" +
    "\uff3a\032\uff3a\033\uff3a\034\uff3a\045\uff3a\046\uff3a\047\uff3a" +
    "\050\uff3a\053\uff3a\054\uff3a\055\uff3a\056\uff3a\057\uff3a\102" +
    "\uff3a\001\002\000\036\003\034\010\uffb0\013\035\015\uffce" +
    "\017\uffce\020\uffce\021\uffb4\022\uffb4\023\uffb4\024\uffb4\025" +
    "\uffb4\026\uffb4\027\uffb4\030\uffb4\001\002\000\064\003\076" +
    "\006\uff83\010\u013f\011\u017a\013\031\014\074\016\055\017" +
    "\077\020\071\031\uff83\032\uff83\033\uff83\034\uff83\045\uff83" +
    "\047\uff83\050\uff83\051\044\052\051\053\uff83\054\uff83\055" +
    "\uff83\056\uff83\057\uff83\102\uff83\112\067\001\002\000\034" +
    "\003\uffce\010\uffb0\015\uffce\017\uffce\020\uffce\021\uffb4\022" +
    "\uffb4\023\uffb4\024\uffb4\025\uffb4\026\uffb4\027\uffb4\030\uffb4" +
    "\001\002\000\012\003\110\015\u017c\017\077\020\071\001" +
    "\002\000\042\003\u016c\005\u016b\011\020\031\023\032\015" +
    "\033\013\034\u010c\045\u010a\047\u0109\050\u0112\053\u010e\054" +
    "\u0113\055\u0111\056\376\057\u0106\102\u0104\001\002\000\046" +
    "\003\uff3b\005\uff3b\006\uff3b\011\uff3b\031\uff3b\032\uff3b\033" +
    "\uff3b\034\uff3b\045\uff3b\046\uff3b\047\uff3b\050\uff3b\053\uff3b" +
    "\054\uff3b\055\uff3b\056\uff3b\057\uff3b\102\uff3b\001\002\000" +
    "\020\003\076\011\102\014\074\016\055\051\044\052\051" +
    "\112\067\001\002\000\020\003\076\011\102\014\074\016" +
    "\055\051\044\052\051\112\067\001\002\000\012\003\u0181" +
    "\015\u0182\017\077\020\071\001\002\000\054\003\u0176\005" +
    "\u016b\011\u0175\014\074\016\055\031\023\032\015\033\013" +
    "\034\u010c\045\u010a\047\u0109\050\u0112\051\044\052\051\053" +
    "\u010e\054\u0113\055\u0111\056\376\057\u0106\102\u0104\112\067" +
    "\001\002\000\042\003\u016c\005\u016b\011\020\031\023\032" +
    "\015\033\013\034\u010c\045\u010a\047\u0109\050\u0112\053\u010e" +
    "\054\u0113\055\u0111\056\376\057\u0106\102\u0104\001\002\000" +
    "\046\003\uff39\005\uff39\006\uff39\011\uff39\031\uff39\032\uff39" +
    "\033\uff39\034\uff39\045\uff39\046\uff39\047\uff39\050\uff39\053" +
    "\uff39\054\uff39\055\uff39\056\uff39\057\uff39\102\uff39\001\002" +
    "\000\046\003\uff37\005\uff37\006\uff37\011\uff37\031\uff37\032" +
    "\uff37\033\uff37\034\uff37\045\uff37\046\uff37\047\uff37\050\uff37" +
    "\053\uff37\054\uff37\055\uff37\056\uff37\057\uff37\102\uff37\001" +
    "\002\000\012\003\110\015\u0186\017\077\020\071\001\002" +
    "\000\042\003\u016c\005\u016b\011\020\031\023\032\015\033" +
    "\013\034\u010c\045\u010a\047\u0109\050\u0112\053\u010e\054\u0113" +
    "\055\u0111\056\376\057\u0106\102\u0104\001\002\000\046\003" +
    "\uff38\005\uff38\006\uff38\011\uff38\031\uff38\032\uff38\033\uff38" +
    "\034\uff38\045\uff38\046\uff38\047\uff38\050\uff38\053\uff38\054" +
    "\uff38\055\uff38\056\uff38\057\uff38\102\uff38\001\002\000\042" +
    "\003\u0189\006\u018a\011\020\031\023\032\015\033\013\034" +
    "\u010c\045\u010a\047\u0109\050\u0112\053\u010e\054\u0113\055\u0111" +
    "\056\376\057\u0106\102\u0104\001\002\000\050\003\uff90\005" +
    "\uff90\006\uff90\010\u013f\011\030\013\031\031\uff90\032\uff90" +
    "\033\uff90\034\uff90\045\uff90\047\uff90\050\uff90\053\uff90\054" +
    "\uff90\055\uff90\056\uff90\057\uff90\102\uff90\001\002\000\044" +
    "\003\uff93\005\uff93\006\uff93\011\uff93\031\uff93\032\uff93\033" +
    "\uff93\034\uff93\045\uff93\047\uff93\050\uff93\053\uff93\054\uff93" +
    "\055\uff93\056\uff93\057\uff93\102\uff93\001\002\000\004\011" +
    "\u01b0\001\002\000\006\003\u018e\011\u018d\001\002\000\006" +
    "\003\u01a7\100\u01a8\001\002\000\004\100\u018f\001\002\000" +
    "\054\060\u0191\061\u0197\062\u0195\063\u0196\064\u019f\065\u019a" +
    "\066\u01a0\067\u0198\070\u019c\071\u01a3\072\u01a2\073\u019e\074" +
    "\u01a1\075\u01a5\076\u019d\077\u0194\103\u0192\104\u0190\105\u0193" +
    "\106\u01a4\107\u019b\001\002\000\006\003\uff4a\015\uff4a\001" +
    "\002\000\006\003\uff54\015\uff54\001\002\000\006\003\uff4b" +
    "\015\uff4b\001\002\000\006\003\uff49\015\uff49\001\002\000" +
    "\006\003\uff40\015\uff40\001\002\000\006\003\uff52\015\uff52" +
    "\001\002\000\006\003\uff51\015\uff51\001\002\000\006\003" +
    "\uff53\015\uff53\001\002\000\006\003\uff4d\015\uff4d\001\002" +
    "\000\004\015\u01a6\001\002\000\006\003\uff4f\015\uff4f\001" +
    "\002\000\006\003\uff47\015\uff47\001\002\000\006\003\uff4c" +
    "\015\uff4c\001\002\000\006\003\uff41\015\uff41\001\002\000" +
    "\006\003\uff44\015\uff44\001\002\000\006\003\uff50\015\uff50" +
    "\001\002\000\006\003\uff4e\015\uff4e\001\002\000\006\003" +
    "\uff43\015\uff43\001\002\000\006\003\uff45\015\uff45\001\002" +
    "\000\006\003\uff46\015\uff46\001\002\000\006\003\uff48\015" +
    "\uff48\001\002\000\006\003\uff42\015\uff42\001\002\000\006" +
    "\003\uff57\010\uff57\001\002\000\054\060\u0191\061\u0197\062" +
    "\u0195\063\u0196\064\u019f\065\u019a\066\u01a0\067\u0198\070\u019c" +
    "\071\u01a3\072\u01a2\073\u019e\074\u01a1\075\u01a5\076\u019d\077" +
    "\u0194\103\u0192\104\u0190\105\u0193\106\u01a4\107\u019b\001\002" +
    "\000\056\003\u01aa\060\u0191\061\u0197\062\u0195\063\u0196\064" +
    "\u019f\065\u019a\066\u01a0\067\u0198\070\u019c\071\u01a3\072\u01a2" +
    "\073\u019e\074\u01a1\075\u01a5\076\u019d\077\u0194\103\u0192\104" +
    "\u0190\105\u0193\106\u01a4\107\u019b\001\002\000\006\003\u01ac" +
    "\015\u01ad\001\002\000\004\015\u01ab\001\002\000\006\003" +
    "\uff55\010\uff55\001\002\000\006\003\uff58\010\uff58\001\002" +
    "\000\006\003\uff5a\010\uff5a\001\002\000\004\015\u01af\001" +
    "\002\000\006\003\uff56\010\uff56\001\002\000\004\100\u01b1" +
    "\001\002\000\054\060\u0191\061\u0197\062\u0195\063\u0196\064" +
    "\u019f\065\u019a\066\u01a0\067\u0198\070\u019c\071\u01a3\072\u01a2" +
    "\073\u019e\074\u01a1\075\u01a5\076\u019d\077\u0194\103\u0192\104" +
    "\u0190\105\u0193\106\u01a4\107\u019b\001\002\000\004\015\u01b3" +
    "\001\002\000\006\003\uff59\010\uff59\001\002\000\046\003" +
    "\uff7c\005\uff7c\006\uff7c\011\uff7c\031\uff7c\032\uff7c\033\uff7c" +
    "\034\uff7c\045\uff7c\046\uff7c\047\uff7c\050\uff7c\053\uff7c\054" +
    "\uff7c\055\uff7c\056\uff7c\057\uff7c\102\uff7c\001\002\000\046" +
    "\003\uff7e\005\uff7e\006\uff7e\011\uff7e\031\uff7e\032\uff7e\033" +
    "\uff7e\034\uff7e\045\uff7e\046\uff7e\047\uff7e\050\uff7e\053\uff7e" +
    "\054\uff7e\055\uff7e\056\uff7e\057\uff7e\102\uff7e\001\002\000" +
    "\010\003\135\011\134\111\045\001\002\000\010\003\u01b9" +
    "\011\134\111\045\001\002\000\006\003\u01bb\015\u01bc\001" +
    "\002\000\006\003\uffd4\015\u01ba\001\002\000\006\003\uff6d" +
    "\010\uff6d\001\002\000\006\003\uff6e\010\uff6e\001\002\000" +
    "\006\003\uff70\010\uff70\001\002\000\004\015\u01be\001\002" +
    "\000\006\003\uff6f\010\uff6f\001\002\000\026\003\065\010" +
    "\uffb1\011\053\013\031\014\052\016\055\051\044\052\051" +
    "\111\045\112\041\001\002\000\022\003\u01c1\011\053\014" +
    "\052\016\055\051\044\052\051\111\045\112\041\001\002" +
    "\000\032\003\076\010\u01c4\011\075\014\074\016\055\017" +
    "\077\020\071\027\uffd7\030\uffd7\051\044\052\051\112\067" +
    "\001\002\000\010\010\u01c3\027\060\030\062\001\002\000" +
    "\044\003\uffef\005\uffef\006\uffef\011\uffef\031\uffef\032\uffef" +
    "\033\uffef\034\uffef\045\uffef\047\uffef\050\uffef\053\uffef\054" +
    "\uffef\055\uffef\056\uffef\057\uffef\102\uffef\001\002\000\044" +
    "\003\uffec\005\uffec\006\uffec\011\uffec\031\uffec\032\uffec\033" +
    "\uffec\034\uffec\045\uffec\047\uffec\050\uffec\053\uffec\054\uffec" +
    "\055\uffec\056\uffec\057\uffec\102\uffec\001\002\000\010\010" +
    "\u01c6\027\060\030\062\001\002\000\044\003\uffeb\005\uffeb" +
    "\006\uffeb\011\uffeb\031\uffeb\032\uffeb\033\uffeb\034\uffeb\045" +
    "\uffeb\047\uffeb\050\uffeb\053\uffeb\054\uffeb\055\uffeb\056\uffeb" +
    "\057\uffeb\102\uffeb\001\002\000\046\003\uff7d\005\uff7d\006" +
    "\uff7d\011\uff7d\031\uff7d\032\uff7d\033\uff7d\034\uff7d\045\uff7d" +
    "\046\uff7d\047\uff7d\050\uff7d\053\uff7d\054\uff7d\055\uff7d\056" +
    "\uff7d\057\uff7d\102\uff7d\001\002\000\046\003\uff7f\005\uff7f" +
    "\006\uff7f\011\uff7f\031\uff7f\032\uff7f\033\uff7f\034\uff7f\045" +
    "\uff7f\046\uff7f\047\uff7f\050\uff7f\053\uff7f\054\uff7f\055\uff7f" +
    "\056\uff7f\057\uff7f\102\uff7f\001\002\000\004\011\u01d9\001" +
    "\002\000\006\003\u01cc\011\u01cb\001\002\000\006\003\u01d0" +
    "\036\u01d1\001\002\000\004\036\u01cd\001\002\000\004\011" +
    "\u01ce\001\002\000\004\015\u01cf\001\002\000\006\003\uff5d" +
    "\010\uff5d\001\002\000\004\011\u01d7\001\002\000\006\003" +
    "\u01d3\011\u01d2\001\002\000\006\003\u01d5\015\u01d6\001\002" +
    "\000\004\015\u01d4\001\002\000\006\003\uff5c\010\uff5c\001" +
    "\002\000\006\003\uff5e\010\uff5e\001\002\000\006\003\uff60" +
    "\010\uff60\001\002\000\004\015\u01d8\001\002\000\006\003" +
    "\uff5b\010\uff5b\001\002\000\004\036\u01da\001\002\000\004" +
    "\011\u01db\001\002\000\004\015\u01dc\001\002\000\006\003" +
    "\uff5f\010\uff5f\001\002\000\046\003\uff73\005\uff73\006\uff73" +
    "\011\uff73\031\uff73\032\uff73\033\uff73\034\uff73\045\uff73\046" +
    "\uff73\047\uff73\050\uff73\053\uff73\054\uff73\055\uff73\056\uff73" +
    "\057\uff73\102\uff73\001\002\000\046\003\uff76\005\uff76\006" +
    "\uff76\011\uff76\031\uff76\032\uff76\033\uff76\034\uff76\045\uff76" +
    "\046\uff76\047\uff76\050\uff76\053\uff76\054\uff76\055\uff76\056" +
    "\uff76\057\uff76\102\uff76\001\002\000\004\002\uff96\001\002" +
    "\000\044\003\uffed\005\uffed\006\uffed\011\uffed\031\uffed\032" +
    "\uffed\033\uffed\034\uffed\045\uffed\047\uffed\050\uffed\053\uffed" +
    "\054\uffed\055\uffed\056\uffed\057\uffed\102\uffed\001\002\000" +
    "\006\003\u01e9\013\u01ea\001\002\000\004\013\u01e3\001\002" +
    "\000\004\035\u01e4\001\002\000\004\043\u01e5\001\002\000" +
    "\010\003\135\011\134\111\045\001\002\000\004\044\u01e7" +
    "\001\002\000\004\010\u01e8\001\002\000\014\003\uffa0\006" +
    "\uffa0\041\uffa0\042\uffa0\101\uffa0\001\002\000\004\035\u01fa" +
    "\001\002\000\004\035\u01eb\001\002\000\006\003\u01ec\043" +
    "\u01ed\001\002\000\010\003\135\011\134\111\045\001\002" +
    "\000\010\003\u01ef\011\134\111\045\001\002\000\006\003" +
    "\u01f2\044\u01f3\001\002\000\010\003\uffd4\036\uffd4\044\u01f0" +
    "\001\002\000\004\010\u01f1\001\002\000\014\003\uff9d\006" +
    "\uff9d\041\uff9d\042\uff9d\101\uff9d\001\002\000\004\010\u01f6" +
    "\001\002\000\006\003\u01f4\010\u01f5\001\002\000\014\003" +
    "\uff9b\006\uff9b\041\uff9b\042\uff9b\101\uff9b\001\002\000\014" +
    "\003\uffa2\006\uffa2\041\uffa2\042\uffa2\101\uffa2\001\002\000" +
    "\014\003\uff9c\006\uff9c\041\uff9c\042\uff9c\101\uff9c\001\002" +
    "\000\004\044\u01f8\001\002\000\004\010\u01f9\001\002\000" +
    "\014\003\uff9e\006\uff9e\041\uff9e\042\uff9e\101\uff9e\001\002" +
    "\000\004\043\u01fb\001\002\000\010\003\135\011\134\111" +
    "\045\001\002\000\004\044\u01fd\001\002\000\004\010\u01fe" +
    "\001\002\000\014\003\uff9f\006\uff9f\041\uff9f\042\uff9f\101" +
    "\uff9f\001\002\000\004\012\uffaf\001\002\000\004\012\u0201" +
    "\001\002\000\004\005\u0202\001\002\000\044\003\u010f\005" +
    "\u0108\006\u0107\011\020\031\023\032\015\033\013\034\u010c" +
    "\045\u010a\047\u0109\050\u0112\053\u010e\054\u0113\055\u0111\056" +
    "\376\057\u0106\102\u0104\001\002\000\004\002\ufffe\001\002" +
    "\000\004\005\u0205\001\002\000\014\003\171\006\170\041" +
    "\164\042\167\101\162\001\002\000\004\012\u0207\001\002" +
    "\000\004\005\u0208\001\002\000\044\003\u010f\005\u0108\006" +
    "\u0107\011\020\031\023\032\015\033\013\034\u010c\045\u010a" +
    "\047\u0109\050\u0112\053\u010e\054\u0113\055\u0111\056\376\057" +
    "\u0106\102\u0104\001\002\000\004\002\ufffd\001\002\000\032" +
    "\003\076\010\u020e\011\075\014\074\016\055\017\077\020" +
    "\071\027\uffd7\030\uffd7\051\044\052\051\112\067\001\002" +
    "\000\010\010\u020c\027\060\030\062\001\002\000\016\003" +
    "\021\006\014\011\020\031\023\032\015\033\013\001\002" +
    "\000\004\007\ufff9\001\002\000\016\003\021\006\014\011" +
    "\020\031\023\032\015\033\013\001\002\000\004\007\ufff3" +
    "\001\002\000\004\007\u0211\001\002\000\006\003\u0213\005" +
    "\u0212\001\002\000\014\003\171\006\170\041\164\042\167" +
    "\101\162\001\002\000\004\005\u0214\001\002\000\014\003" +
    "\171\006\170\041\164\042\167\101\162\001\002\000\004" +
    "\012\u0216\001\002\000\004\005\u0217\001\002\000\044\003" +
    "\u010f\005\u0108\006\u0107\011\020\031\023\032\015\033\013" +
    "\034\u010c\045\u010a\047\u0109\050\u0112\053\u010e\054\u0113\055" +
    "\u0111\056\376\057\u0106\102\u0104\001\002\000\004\002\ufffc" +
    "\001\002\000\004\012\u021a\001\002\000\004\005\u021b\001" +
    "\002\000\044\003\u010f\005\u0108\006\u0107\011\020\031\023" +
    "\032\015\033\013\034\u010c\045\u010a\047\u0109\050\u0112\053" +
    "\u010e\054\u0113\055\u0111\056\376\057\u0106\102\u0104\001\002" +
    "\000\004\002\uffff\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\u021a\000\004\003\004\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\012\004\u020f\007\016" +
    "\010\010\011\021\001\001\000\012\004\011\007\016\010" +
    "\010\011\021\001\001\000\020\012\u020a\013\042\014\041" +
    "\015\047\051\055\052\046\053\045\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\012\004\153\007\016\010\010\011\021\001\001\000" +
    "\004\010\037\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\012\004\026\007" +
    "\016\010\010\011\021\001\001\000\012\004\025\007\016" +
    "\010\010\011\021\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\012\004\032" +
    "\007\016\010\010\011\021\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\020" +
    "\012\150\013\042\014\041\015\047\051\055\052\046\053" +
    "\045\001\001\000\020\012\056\013\042\014\041\015\047" +
    "\051\055\052\046\053\045\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\020\113\001\001\000\004\016\146\001" +
    "\001\000\004\017\104\001\001\000\002\001\001\000\020" +
    "\012\144\013\042\014\041\015\143\051\055\052\046\053" +
    "\077\001\001\000\002\001\001\000\014\014\067\015\072" +
    "\017\071\052\046\053\045\001\001\000\012\014\067\015" +
    "\137\052\046\053\045\001\001\000\002\001\001\000\004" +
    "\016\063\001\001\000\002\001\001\000\012\004\130\007" +
    "\016\010\010\011\021\001\001\000\002\001\001\000\012" +
    "\004\127\007\016\010\010\011\021\001\001\000\020\012" +
    "\065\013\042\014\041\015\047\051\055\052\046\053\045" +
    "\001\001\000\014\014\067\015\072\017\071\052\046\053" +
    "\045\001\001\000\004\016\063\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\012\014\067\015" +
    "\126\052\046\053\045\001\001\000\004\017\104\001\001" +
    "\000\012\014\067\015\100\052\046\053\077\001\001\000" +
    "\002\001\001\000\014\014\067\015\072\017\071\052\046" +
    "\053\045\001\001\000\002\001\001\000\004\020\113\001" +
    "\001\000\004\017\104\001\001\000\002\001\001\000\012" +
    "\014\067\015\110\052\046\053\045\001\001\000\002\001" +
    "\001\000\012\014\067\015\105\052\046\053\045\001\001" +
    "\000\004\017\104\001\001\000\014\014\067\015\072\017" +
    "\071\052\046\053\045\001\001\000\012\014\067\015\110" +
    "\052\046\053\045\001\001\000\004\017\104\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\052\046\053\122" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\052\046\053\124\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\017\104\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\013\136\051" +
    "\055\001\001\000\006\013\135\051\055\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\017\104\001\001\000\014\014\067\015\072" +
    "\017\071\052\046\053\045\001\001\000\012\004\142\007" +
    "\016\010\010\011\021\001\001\000\002\001\001\000\004" +
    "\017\104\001\001\000\004\016\063\001\001\000\002\001" +
    "\001\000\004\052\147\001\001\000\002\001\001\000\004" +
    "\016\063\001\001\000\012\004\152\007\016\010\010\011" +
    "\021\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\012\005\u01ff\022\160\023\165\024\164\001" +
    "\001\000\002\001\001\000\012\005\162\022\160\023\165" +
    "\024\164\001\001\000\012\005\u01fe\022\160\023\165\024" +
    "\164\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\012\005\276\022\160\023\165\024\164\001" +
    "\001\000\012\005\275\022\160\023\165\024\164\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\010\013\177\030\176\051\055\001\001\000" +
    "\002\001\001\000\002\001\001\000\010\013\177\030\201" +
    "\051\055\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\013\207\051\055\001\001\000\002\001\001\000\006\013" +
    "\211\051\055\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\010\031\221\052\046" +
    "\053\222\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\052\046\053\224\001\001\000\002\001\001\000\006" +
    "\052\046\053\226\001\001\000\002\001\001\000\006\052" +
    "\046\053\230\001\001\000\002\001\001\000\006\052\046" +
    "\053\232\001\001\000\002\001\001\000\006\052\046\053" +
    "\234\001\001\000\002\001\001\000\006\052\046\053\236" +
    "\001\001\000\002\001\001\000\006\052\046\053\240\001" +
    "\001\000\002\001\001\000\006\052\046\053\242\001\001" +
    "\000\002\001\001\000\006\052\046\053\244\001\001\000" +
    "\002\001\001\000\006\052\046\053\246\001\001\000\002" +
    "\001\001\000\006\052\046\053\250\001\001\000\002\001" +
    "\001\000\006\052\046\053\252\001\001\000\002\001\001" +
    "\000\006\052\046\053\254\001\001\000\002\001\001\000" +
    "\006\052\046\053\256\001\001\000\002\001\001\000\006" +
    "\052\046\053\260\001\001\000\002\001\001\000\006\052" +
    "\046\053\262\001\001\000\002\001\001\000\006\052\046" +
    "\053\264\001\001\000\002\001\001\000\006\052\046\053" +
    "\266\001\001\000\002\001\001\000\006\052\046\053\270" +
    "\001\001\000\002\001\001\000\006\052\046\053\272\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\013" +
    "\307\051\055\001\001\000\002\001\001\000\006\013\311" +
    "\051\055\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\013\337\051\055\001\001" +
    "\000\006\013\325\051\055\001\001\000\002\001\001\000" +
    "\006\013\334\051\055\001\001\000\006\013\330\051\055" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\013\341\051" +
    "\055\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\013\346\051\055\001" +
    "\001\000\002\001\001\000\006\013\350\051\055\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\013\360\051\055\001\001\000\002\001" +
    "\001\000\006\013\362\051\055\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\056\006\377\007\u0102\010\371\011\u0115\021\u0114\025\367" +
    "\026\u0118\032\u010f\033\u0116\035\u0101\036\372\037\u0119\040" +
    "\376\041\u0100\042\u0104\043\374\044\u0117\045\u0113\046\u010c" +
    "\047\u010a\054\373\055\370\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\056" +
    "\006\u01de\007\u0102\010\371\011\u0115\021\u0114\025\367\026" +
    "\u0118\032\u010f\033\u0116\035\u0101\036\372\037\u0119\040\376" +
    "\041\u0100\042\u0104\043\374\044\u0117\045\u0113\046\u010c\047" +
    "\u010a\054\373\055\370\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\010\u01bf\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\052\007\u0136\010\u0135\011\u013b\025\367\026\u0118" +
    "\032\u010f\033\u013c\034\u0187\035\u0101\036\372\037\u0119\040" +
    "\376\041\u0100\042\u0104\043\374\044\u0117\045\u0113\046\u010c" +
    "\047\u010a\055\370\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\052\007\u0136\010\u0135\011\u013b\025" +
    "\367\026\u0118\032\u010f\033\u013c\034\u0137\035\u0101\036\372" +
    "\037\u0119\040\376\041\u0100\042\u0104\043\374\044\u0117\045" +
    "\u0113\046\u010c\047\u010a\055\370\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\056\006\u011d\007\u0102\010\371\011\u0115" +
    "\021\u0114\025\367\026\u0118\032\u010f\033\u0116\035\u0101\036" +
    "\372\037\u0119\040\376\041\u0100\042\u0104\043\374\044\u0117" +
    "\045\u0113\046\u010c\047\u010a\054\373\055\370\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\052\u012a\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\010\u0142\001\001\000\050\007\u0136" +
    "\010\u0135\011\u013b\025\367\026\u0118\032\u010f\033\u013f\035" +
    "\u0101\036\372\037\u0119\040\376\041\u0100\042\u0104\043\374" +
    "\044\u0117\045\u0113\046\u010c\047\u010a\055\370\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\020\012\u0147" +
    "\013\042\014\041\015\047\051\055\052\046\053\045\001" +
    "\001\000\020\012\u0144\013\042\014\041\015\047\051\055" +
    "\052\046\053\045\001\001\000\014\014\067\015\072\017" +
    "\071\052\046\053\045\001\001\000\004\016\063\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\016\063\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\013\u0151" +
    "\051\055\001\001\000\006\013\u014d\051\055\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\027\u015e\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\012\014" +
    "\067\015\u017a\052\046\053\045\001\001\000\012\014\067" +
    "\015\u0167\052\046\053\045\001\001\000\004\017\104\001" +
    "\001\000\062\007\u0136\010\u0135\011\u013b\014\067\015\110" +
    "\025\367\026\u0118\032\u010f\033\u016c\035\u0101\036\372\037" +
    "\u0119\040\376\041\u0100\042\u0104\043\374\044\u0117\045\u0113" +
    "\046\u010c\047\u010a\052\046\053\045\055\370\056\u0176\001" +
    "\001\000\052\007\u0136\010\u0135\011\u013b\025\367\026\u0118" +
    "\032\u010f\033\u016c\035\u0101\036\372\037\u0119\040\376\041" +
    "\u0100\042\u0104\043\374\044\u0117\045\u0113\046\u010c\047\u010a" +
    "\055\370\056\u016d\001\001\000\052\007\u0136\010\u0135\011" +
    "\u013b\025\367\026\u0118\032\u010f\033\u013c\034\u0171\035\u0101" +
    "\036\372\037\u0119\040\376\041\u0100\042\u0104\043\374\044" +
    "\u0117\045\u0113\046\u010c\047\u010a\055\370\001\001\000\052" +
    "\007\u0136\010\u0135\011\u013b\025\367\026\u0118\032\u010f\033" +
    "\u013c\034\u016f\035\u0101\036\372\037\u0119\040\376\041\u0100" +
    "\042\u0104\043\374\044\u0117\045\u0113\046\u010c\047\u010a\055" +
    "\370\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\050\007\u0136\010\u0135\011\u013b\025\367\026" +
    "\u0118\032\u010f\033\u013f\035\u0101\036\372\037\u0119\040\376" +
    "\041\u0100\042\u0104\043\374\044\u0117\045\u0113\046\u010c\047" +
    "\u010a\055\370\001\001\000\002\001\001\000\050\007\u0136" +
    "\010\u0135\011\u013b\025\367\026\u0118\032\u010f\033\u013f\035" +
    "\u0101\036\372\037\u0119\040\376\041\u0100\042\u0104\043\374" +
    "\044\u0117\045\u0113\046\u010c\047\u010a\055\370\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\064" +
    "\007\u0136\010\u0135\011\u013b\014\067\015\072\017\071\025" +
    "\367\026\u0118\032\u010f\033\u013c\034\u016f\035\u0101\036\372" +
    "\037\u0119\040\376\041\u0100\042\u0104\043\374\044\u0117\045" +
    "\u0113\046\u010c\047\u010a\052\046\053\045\055\370\001\001" +
    "\000\002\001\001\000\002\001\001\000\014\014\067\015" +
    "\072\017\071\052\046\053\045\001\001\000\002\001\001" +
    "\000\004\017\104\001\001\000\052\007\u0136\010\u0135\011" +
    "\u013b\025\367\026\u0118\032\u010f\033\u016c\035\u0101\036\372" +
    "\037\u0119\040\376\041\u0100\042\u0104\043\374\044\u0117\045" +
    "\u0113\046\u010c\047\u010a\055\370\056\u017c\001\001\000\002" +
    "\001\001\000\012\014\067\015\u0184\052\046\053\045\001" +
    "\001\000\012\014\067\015\u017f\052\046\053\045\001\001" +
    "\000\004\017\104\001\001\000\062\007\u0136\010\u0135\011" +
    "\u013b\014\067\015\110\025\367\026\u0118\032\u010f\033\u016c" +
    "\035\u0101\036\372\037\u0119\040\376\041\u0100\042\u0104\043" +
    "\374\044\u0117\045\u0113\046\u010c\047\u010a\052\046\053\045" +
    "\055\370\056\u0183\001\001\000\052\007\u0136\010\u0135\011" +
    "\u013b\025\367\026\u0118\032\u010f\033\u016c\035\u0101\036\372" +
    "\037\u0119\040\376\041\u0100\042\u0104\043\374\044\u0117\045" +
    "\u0113\046\u010c\047\u010a\055\370\056\u0182\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\017\104\001\001\000" +
    "\052\007\u0136\010\u0135\011\u013b\025\367\026\u0118\032\u010f" +
    "\033\u016c\035\u0101\036\372\037\u0119\040\376\041\u0100\042" +
    "\u0104\043\374\044\u0117\045\u0113\046\u010c\047\u010a\055\370" +
    "\056\u0186\001\001\000\002\001\001\000\050\007\u0136\010" +
    "\u0135\011\u013b\025\367\026\u0118\032\u010f\033\u013f\035\u0101" +
    "\036\372\037\u0119\040\376\041\u0100\042\u0104\043\374\044" +
    "\u0117\045\u0113\046\u010c\047\u010a\055\370\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\050\u0198" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\050\u01ad\001\001\000\004\050\u01a8" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\050\u01b1\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\013\u01bc\051\055\001\001\000" +
    "\006\013\u01b7\051\055\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\020\012\u01c4" +
    "\013\042\014\041\015\047\051\055\052\046\053\045\001" +
    "\001\000\020\012\u01c1\013\042\014\041\015\047\051\055" +
    "\052\046\053\045\001\001\000\014\014\067\015\072\017" +
    "\071\052\046\053\045\001\001\000\004\016\063\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\016\063\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\010\013\177\030" +
    "\u01e5\051\055\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\010\013\177\030\u01f6\051\055\001\001" +
    "\000\010\013\177\030\u01ed\051\055\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\010\013" +
    "\177\030\u01fb\051\055\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\056\006\u0202\007\u0102\010\371" +
    "\011\u0115\021\u0114\025\367\026\u0118\032\u010f\033\u0116\035" +
    "\u0101\036\372\037\u0119\040\376\041\u0100\042\u0104\043\374" +
    "\044\u0117\045\u0113\046\u010c\047\u010a\054\373\055\370\001" +
    "\001\000\002\001\001\000\002\001\001\000\012\005\u0205" +
    "\022\160\023\165\024\164\001\001\000\002\001\001\000" +
    "\002\001\001\000\056\006\u0208\007\u0102\010\371\011\u0115" +
    "\021\u0114\025\367\026\u0118\032\u010f\033\u0116\035\u0101\036" +
    "\372\037\u0119\040\376\041\u0100\042\u0104\043\374\044\u0117" +
    "\045\u0113\046\u010c\047\u010a\054\373\055\370\001\001\000" +
    "\002\001\001\000\014\014\067\015\072\017\071\052\046" +
    "\053\045\001\001\000\004\016\063\001\001\000\012\004" +
    "\u020c\007\016\010\010\011\021\001\001\000\002\001\001" +
    "\000\012\004\u020e\007\016\010\010\011\021\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\012" +
    "\005\u0218\022\160\023\165\024\164\001\001\000\002\001" +
    "\001\000\012\005\u0214\022\160\023\165\024\164\001\001" +
    "\000\002\001\001\000\002\001\001\000\056\006\u0217\007" +
    "\u0102\010\371\011\u0115\021\u0114\025\367\026\u0118\032\u010f" +
    "\033\u0116\035\u0101\036\372\037\u0119\040\376\041\u0100\042" +
    "\u0104\043\374\044\u0117\045\u0113\046\u010c\047\u010a\054\373" +
    "\055\370\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\056\006\u021b\007\u0102\010\371\011\u0115" +
    "\021\u0114\025\367\026\u0118\032\u010f\033\u0116\035\u0101\036" +
    "\372\037\u0119\040\376\041\u0100\042\u0104\043\374\044\u0117" +
    "\045\u0113\046\u010c\047\u010a\054\373\055\370\001\001\000" +
    "\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Asintactico$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Asintactico$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Asintactico$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



ArrayList<Error1> ManejadorDeErrores;

public Asintactico(java_cup.runtime.Scanner s,ArrayList<Error1> m) {super(s); ManejadorDeErrores =m; }

public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception{
    report_error("No se encontró ;",s);

}

public void syntax_error(Symbol s){

//report_error("Sintactico",s);
}

public void report_error(String message, Object info){
    if(info!=null){
        java_cup.runtime.Symbol s=(java_cup.runtime.Symbol)info;
        String valor="";
        if(s.value!=null){valor=s.value.toString();}
        ManejadorDeErrores.add(new Error1(message,s.left,s.right,valor));
    }else{
        ManejadorDeErrores.add(new Error1(message,-1,-1,"?????"));
    }
}



/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$Asintactico$actions {


void print(String msj)
   {System.out.println(msj);}

  private final Asintactico parser;

  /** Constructor */
  CUP$Asintactico$actions(Asintactico parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$Asintactico$do_action_part00000000(
    int                        CUP$Asintactico$act_num,
    java_cup.runtime.lr_parser CUP$Asintactico$parser,
    java.util.Stack            CUP$Asintactico$stack,
    int                        CUP$Asintactico$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Asintactico$result;

      /* select the action based on the action number */
      switch (CUP$Asintactico$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= STRUCTURE EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-1)).value;
		RESULT = start_val;
              CUP$Asintactico$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Asintactico$parser.done_parsing();
          return CUP$Asintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // BEGIN ::= STRUCTURE 
            {
              Object RESULT =null;

              CUP$Asintactico$result = parser.getSymbolFactory().newSymbol("BEGIN",0, ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()), RESULT);
            }
          return CUP$Asintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // STRUCTURE ::= DECLARE CURLY_BR1 DECLARE_BODY BUILD CURLY_BR1 BUILD_BODY MAIN CURLY_BR1 MAIN_BODY 
            {
              Object RESULT =null;

              CUP$Asintactico$result = parser.getSymbolFactory().newSymbol("STRUCTURE",1, ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-8)), ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()), RESULT);
            }
          return CUP$Asintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // STRUCTURE ::= DECLARE error CURLY_BR1 DECLARE_BODY BUILD CURLY_BR1 BUILD_BODY MAIN CURLY_BR1 MAIN_BODY 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-8)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-8)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-8)).value;
		parser.ManejadorDeErrores.add(new Error1("ES",eleft-1,eright,"Syntax Error: Unexpected value after DECLARE. Line: "+(eleft+1)));
              CUP$Asintactico$result = parser.getSymbolFactory().newSymbol("STRUCTURE",1, ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-9)), ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()), RESULT);
            }
          return CUP$Asintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // STRUCTURE ::= DECLARE error DECLARE_BODY BUILD CURLY_BR1 BUILD_BODY MAIN CURLY_BR1 MAIN_BODY 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-7)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-7)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-7)).value;
		parser.ManejadorDeErrores.add(new Error1("ES",eleft-1,eright,"Syntax Error: Curly Bracket expected after DECLARE. Line: "+(eleft+1)));
              CUP$Asintactico$result = parser.getSymbolFactory().newSymbol("STRUCTURE",1, ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-8)), ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()), RESULT);
            }
          return CUP$Asintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // STRUCTURE ::= DECLARE CURLY_BR1 DECLARE_BODY BUILD error CURLY_BR1 BUILD_BODY MAIN CURLY_BR1 MAIN_BODY 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-5)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-5)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-5)).value;
		parser.ManejadorDeErrores.add(new Error1("ES",eleft-1,eright,"Syntax Error: Unexpected value after BUILD. Line: "+(eleft+1)));
              CUP$Asintactico$result = parser.getSymbolFactory().newSymbol("STRUCTURE",1, ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-9)), ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()), RESULT);
            }
          return CUP$Asintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // STRUCTURE ::= DECLARE error CURLY_BR1 DECLARE_BODY BUILD error CURLY_BR1 BUILD_BODY MAIN CURLY_BR1 MAIN_BODY 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-5)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-5)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-5)).value;
		parser.ManejadorDeErrores.add(new Error1("ES",eleft-1,eright,"Syntax Error: Unexpected value after BUILD. Line: "+(eleft+1)));
              CUP$Asintactico$result = parser.getSymbolFactory().newSymbol("STRUCTURE",1, ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-10)), ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()), RESULT);
            }
          return CUP$Asintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // DECLARE_BODY ::= DATA_TYPE ASSIG EXP SEMICOLON_SIGN DECLARE_BODY 
            {
              Object RESULT =null;

              CUP$Asintactico$result = parser.getSymbolFactory().newSymbol("DECLARE_BODY",2, ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()), RESULT);
            }
          return CUP$Asintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // DECLARE_BODY ::= ASSIG EXP SEMICOLON_SIGN DECLARE_BODY 
            {
              Object RESULT =null;

              CUP$Asintactico$result = parser.getSymbolFactory().newSymbol("DECLARE_BODY",2, ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()), RESULT);
            }
          return CUP$Asintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // DECLARE_BODY ::= DEC SEMICOLON_SIGN DECLARE_BODY 
            {
              Object RESULT =null;

              CUP$Asintactico$result = parser.getSymbolFactory().newSymbol("DECLARE_BODY",2, ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()), RESULT);
            }
          return CUP$Asintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // DECLARE_BODY ::= CURLY_BR2 
            {
              Object RESULT =null;

              CUP$Asintactico$result = parser.getSymbolFactory().newSymbol("DECLARE_BODY",2, ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()), RESULT);
            }
          return CUP$Asintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // DECLARE_BODY ::= DATA_TYPE ASSIG EXP error DECLARE_BODY 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-1)).value;
		parser.ManejadorDeErrores.add(new Error1("ES",eleft-1,eright,"Syntax Error: SEMICOLON (';') Missing. Line: "+(eleft+1)));
              CUP$Asintactico$result = parser.getSymbolFactory().newSymbol("DECLARE_BODY",2, ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()), RESULT);
            }
          return CUP$Asintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // DECLARE_BODY ::= DATA_TYPE error EXP SEMICOLON_SIGN DECLARE_BODY 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-3)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-3)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-3)).value;
		parser.ManejadorDeErrores.add(new Error1("ES",eleft-1,eright,"Syntax Error: ASSIG('=') Missing. Line: "+(eleft+1)));
              CUP$Asintactico$result = parser.getSymbolFactory().newSymbol("DECLARE_BODY",2, ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()), RESULT);
            }
          return CUP$Asintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // DECLARE_BODY ::= DATA_TYPE ASSIG error SEMICOLON_SIGN DECLARE_BODY 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-2)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-2)).value;
		parser.ManejadorDeErrores.add(new Error1("ES",eleft-1,eright,"Syntax Error: EXPRESSION Missing. Line: "+(eleft+1)));
              CUP$Asintactico$result = parser.getSymbolFactory().newSymbol("DECLARE_BODY",2, ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()), RESULT);
            }
          return CUP$Asintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // DECLARE_BODY ::= ASSIG error SEMICOLON_SIGN DECLARE_BODY 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-2)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-2)).value;
		parser.ManejadorDeErrores.add(new Error1("ES",eleft-1,eright,"Syntax Error:  EXPRESSION Missing. Line: "+(eleft+1)));
              CUP$Asintactico$result = parser.getSymbolFactory().newSymbol("DECLARE_BODY",2, ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()), RESULT);
            }
          return CUP$Asintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // DECLARE_BODY ::= DEC error DECLARE_BODY 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-1)).value;
		parser.ManejadorDeErrores.add(new Error1("ES",eleft-1,eright,"Syntax Error:  SEMICOLON (';') Missing. Line: "+(eleft+1)));
              CUP$Asintactico$result = parser.getSymbolFactory().newSymbol("DECLARE_BODY",2, ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()), RESULT);
            }
          return CUP$Asintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // DECLARE_BODY ::= error SEMICOLON_SIGN DECLARE_BODY 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-2)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-2)).value;
		parser.ManejadorDeErrores.add(new Error1("ES",eleft-1,eright,"Syntax Error:  EXPRESSION Missing. Line: "+(eleft+1)));
              CUP$Asintactico$result = parser.getSymbolFactory().newSymbol("DECLARE_BODY",2, ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()), RESULT);
            }
          return CUP$Asintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // DECLARE_BODY ::= error 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Asintactico$stack.peek()).value;
		parser.ManejadorDeErrores.add(new Error1("ES",eleft-1,eright,"Syntax Error:  CURLY('}') Missing. Line: "+(eleft+1)));
              CUP$Asintactico$result = parser.getSymbolFactory().newSymbol("DECLARE_BODY",2, ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()), RESULT);
            }
          return CUP$Asintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // DECLARE_BODY2 ::= DATA_TYPE ASSIG EXP SEMICOLON_SIGN 
            {
              Object RESULT =null;

              CUP$Asintactico$result = parser.getSymbolFactory().newSymbol("DECLARE_BODY2",42, ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()), RESULT);
            }
          return CUP$Asintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // DECLARE_BODY2 ::= DEC SEMICOLON_SIGN 
            {
              Object RESULT =null;

              CUP$Asintactico$result = parser.getSymbolFactory().newSymbol("DECLARE_BODY2",42, ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()), RESULT);
            }
          return CUP$Asintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // DECLARE_BODY2 ::= ASSIG SEMICOLON_SIGN 
            {
              Object RESULT =null;

              CUP$Asintactico$result = parser.getSymbolFactory().newSymbol("DECLARE_BODY2",42, ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()), RESULT);
            }
          return CUP$Asintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // DECLARE_BODY2 ::= DATA_TYPE ASSIG error SEMICOLON_SIGN 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-1)).value;
		parser.ManejadorDeErrores.add(new Error1("ES",eleft-1,eright,"Syntax Error: EXPRESSION Missing. Line: "+(eleft+1)));
              CUP$Asintactico$result = parser.getSymbolFactory().newSymbol("DECLARE_BODY2",42, ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()), RESULT);
            }
          return CUP$Asintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // DECLARE_BODY2 ::= DATA_TYPE error EXP SEMICOLON_SIGN 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-2)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-2)).value;
		parser.ManejadorDeErrores.add(new Error1("ES",eleft-1,eright,"Syntax Error: ASSIG('=') Missing. Line: "+(eleft+1)));
              CUP$Asintactico$result = parser.getSymbolFactory().newSymbol("DECLARE_BODY2",42, ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()), RESULT);
            }
          return CUP$Asintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // DECLARE_BODY2 ::= error SEMICOLON_SIGN 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-1)).value;
		parser.ManejadorDeErrores.add(new Error1("ES",eleft-1,eright,"Syntax Error: EXPRESSION Missing. Line: "+(eleft+1)));
              CUP$Asintactico$result = parser.getSymbolFactory().newSymbol("DECLARE_BODY2",42, ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()), RESULT);
            }
          return CUP$Asintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // DECLARE_BODY3 ::= DATA_TYPE ASSIG EXP SEMICOLON_SIGN 
            {
              Object RESULT =null;

              CUP$Asintactico$result = parser.getSymbolFactory().newSymbol("DECLARE_BODY3",43, ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()), RESULT);
            }
          return CUP$Asintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // DECLARE_BODY3 ::= DEC SEMICOLON_SIGN 
            {
              Object RESULT =null;

              CUP$Asintactico$result = parser.getSymbolFactory().newSymbol("DECLARE_BODY3",43, ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()), RESULT);
            }
          return CUP$Asintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // DECLARE_BODY3 ::= ASSIG SEMICOLON_SIGN 
            {
              Object RESULT =null;

              CUP$Asintactico$result = parser.getSymbolFactory().newSymbol("DECLARE_BODY3",43, ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()), RESULT);
            }
          return CUP$Asintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // DECLARE_BODY3 ::= DATA_TYPE ASSIG error SEMICOLON_SIGN 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-1)).value;
		parser.ManejadorDeErrores.add(new Error1("ES",eleft-1,eright,"Syntax Error: EXPRESSION Missing. Line: "+(eleft+1)));
              CUP$Asintactico$result = parser.getSymbolFactory().newSymbol("DECLARE_BODY3",43, ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()), RESULT);
            }
          return CUP$Asintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // DECLARE_BODY3 ::= DATA_TYPE error EXP SEMICOLON_SIGN 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-2)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-2)).value;
		parser.ManejadorDeErrores.add(new Error1("ES",eleft-1,eright,"Syntax Error: ASSIG('=') Missing. Line: "+(eleft+1)));
              CUP$Asintactico$result = parser.getSymbolFactory().newSymbol("DECLARE_BODY3",43, ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()), RESULT);
            }
          return CUP$Asintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // DECLARE_BODY3 ::= error SEMICOLON_SIGN 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-1)).value;
		parser.ManejadorDeErrores.add(new Error1("ES",eleft-1,eright,"Syntax Error: EXPRESSION Missing. Line: "+(eleft+1)));
              CUP$Asintactico$result = parser.getSymbolFactory().newSymbol("DECLARE_BODY3",43, ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()), RESULT);
            }
          return CUP$Asintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // ASSIG ::= ID ASSIG_OP 
            {
              Object RESULT =null;

              CUP$Asintactico$result = parser.getSymbolFactory().newSymbol("ASSIG",6, ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()), RESULT);
            }
          return CUP$Asintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // ASSIG ::= ID error 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Asintactico$stack.peek()).value;
		parser.ManejadorDeErrores.add(new Error1("ES",eleft-1,eright,"Syntax Error:  ASSIG('=') Missing. Line: "+(eleft+1)));
              CUP$Asintactico$result = parser.getSymbolFactory().newSymbol("ASSIG",6, ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()), RESULT);
            }
          return CUP$Asintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // ASSIG ::= error ASSIG_OP 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-1)).value;
		parser.ManejadorDeErrores.add(new Error1("ES",eleft-1,eright,"Syntax Error:  Identifier expected. Line: "+(eleft+1)));
              CUP$Asintactico$result = parser.getSymbolFactory().newSymbol("ASSIG",6, ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()), RESULT);
            }
          return CUP$Asintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // DATA_TYPE ::= STRING_WORD 
            {
              Object RESULT =null;

              CUP$Asintactico$result = parser.getSymbolFactory().newSymbol("DATA_TYPE",5, ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()), RESULT);
            }
          return CUP$Asintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // DATA_TYPE ::= INT_WORD 
            {
              Object RESULT =null;

              CUP$Asintactico$result = parser.getSymbolFactory().newSymbol("DATA_TYPE",5, ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()), RESULT);
            }
          return CUP$Asintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // DATA_TYPE ::= BOOLEAN_WORD 
            {
              Object RESULT =null;

              CUP$Asintactico$result = parser.getSymbolFactory().newSymbol("DATA_TYPE",5, ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()), RESULT);
            }
          return CUP$Asintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // EXP ::= NUM 
            {
              Object RESULT =null;

              CUP$Asintactico$result = parser.getSymbolFactory().newSymbol("EXP",8, ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()), RESULT);
            }
          return CUP$Asintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // EXP ::= STRINGVAL 
            {
              Object RESULT =null;

              CUP$Asintactico$result = parser.getSymbolFactory().newSymbol("EXP",8, ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()), RESULT);
            }
          return CUP$Asintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // EXP ::= BOOLEANVAL 
            {
              Object RESULT =null;

              CUP$Asintactico$result = parser.getSymbolFactory().newSymbol("EXP",8, ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()), RESULT);
            }
          return CUP$Asintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // EXP ::= COND 
            {
              Object RESULT =null;

              CUP$Asintactico$result = parser.getSymbolFactory().newSymbol("EXP",8, ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()), RESULT);
            }
          return CUP$Asintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // EXP ::= PARENTH1 EXP PARENTH2 
            {
              Object RESULT =null;

              CUP$Asintactico$result = parser.getSymbolFactory().newSymbol("EXP",8, ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()), RESULT);
            }
          return CUP$Asintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // EXP ::= EXP OP_ARIT EXP 
            {
              Object RESULT =null;

              CUP$Asintactico$result = parser.getSymbolFactory().newSymbol("EXP",8, ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()), RESULT);
            }
          return CUP$Asintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // EXP ::= error 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Asintactico$stack.peek()).value;
		parser.ManejadorDeErrores.add(new Error1("ES",eleft-1,eright,"Syntax Error:  EXPRESSION Missing PREUAB. Line: "+(eleft+1)));
              CUP$Asintactico$result = parser.getSymbolFactory().newSymbol("EXP",8, ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()), RESULT);
            }
          return CUP$Asintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // STRINGVAL ::= STRINGVALAUX 
            {
              Object RESULT =null;

              CUP$Asintactico$result = parser.getSymbolFactory().newSymbol("STRINGVAL",9, ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()), RESULT);
            }
          return CUP$Asintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // STRINGVAL ::= STRINGVALAUX ADD_OP STRINGVAL 
            {
              Object RESULT =null;

              CUP$Asintactico$result = parser.getSymbolFactory().newSymbol("STRINGVAL",9, ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()), RESULT);
            }
          return CUP$Asintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // STRINGVAL ::= error 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Asintactico$stack.peek()).value;
		parser.ManejadorDeErrores.add(new Error1("ES",eleft-1,eright,"Syntax Error:  VALUE Missing . Line: "+(eleft+1)));
              CUP$Asintactico$result = parser.getSymbolFactory().newSymbol("STRINGVAL",9, ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()), RESULT);
            }
          return CUP$Asintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // STRINGVAL ::= STRINGVALAUX error STRINGVAL 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-1)).value;
		parser.ManejadorDeErrores.add(new Error1("ES",eleft-1,eright,"Syntax Error:  OPERATOR('+') Missing . Line: "+(eleft+1)));
              CUP$Asintactico$result = parser.getSymbolFactory().newSymbol("STRINGVAL",9, ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()), RESULT);
            }
          return CUP$Asintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // STRINGVALAUX ::= STRING 
            {
              Object RESULT =null;

              CUP$Asintactico$result = parser.getSymbolFactory().newSymbol("STRINGVALAUX",39, ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()), RESULT);
            }
          return CUP$Asintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // STRINGVALAUX ::= ID 
            {
              Object RESULT =null;

              CUP$Asintactico$result = parser.getSymbolFactory().newSymbol("STRINGVALAUX",39, ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()), RESULT);
            }
          return CUP$Asintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // BOOLEANVAL ::= TRUE 
            {
              Object RESULT =null;

              CUP$Asintactico$result = parser.getSymbolFactory().newSymbol("BOOLEANVAL",10, ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()), RESULT);
            }
          return CUP$Asintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // BOOLEANVAL ::= FALSE 
            {
              Object RESULT =null;

              CUP$Asintactico$result = parser.getSymbolFactory().newSymbol("BOOLEANVAL",10, ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()), RESULT);
            }
          return CUP$Asintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // BOOLEANVAL ::= ID 
            {
              Object RESULT =null;

              CUP$Asintactico$result = parser.getSymbolFactory().newSymbol("BOOLEANVAL",10, ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()), RESULT);
            }
          return CUP$Asintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // OP_ARIT ::= ADD_OP 
            {
              Object RESULT =null;

              CUP$Asintactico$result = parser.getSymbolFactory().newSymbol("OP_ARIT",12, ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()), RESULT);
            }
          return CUP$Asintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // OP_ARIT ::= SUBS_OP 
            {
              Object RESULT =null;

              CUP$Asintactico$result = parser.getSymbolFactory().newSymbol("OP_ARIT",12, ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()), RESULT);
            }
          return CUP$Asintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // OP_LOG ::= AND_OP 
            {
              Object RESULT =null;

              CUP$Asintactico$result = parser.getSymbolFactory().newSymbol("OP_LOG",13, ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()), RESULT);
            }
          return CUP$Asintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // OP_LOG ::= OR_OP 
            {
              Object RESULT =null;

              CUP$Asintactico$result = parser.getSymbolFactory().newSymbol("OP_LOG",13, ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()), RESULT);
            }
          return CUP$Asintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // OP_REL ::= EQUAL_OP 
            {
              Object RESULT =null;

              CUP$Asintactico$result = parser.getSymbolFactory().newSymbol("OP_REL",14, ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()), RESULT);
            }
          return CUP$Asintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // OP_REL ::= GREATER_EQUAL_OP 
            {
              Object RESULT =null;

              CUP$Asintactico$result = parser.getSymbolFactory().newSymbol("OP_REL",14, ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()), RESULT);
            }
          return CUP$Asintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // OP_REL ::= LESS_EQUAL_OP 
            {
              Object RESULT =null;

              CUP$Asintactico$result = parser.getSymbolFactory().newSymbol("OP_REL",14, ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()), RESULT);
            }
          return CUP$Asintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // OP_REL ::= NOT_EQUAL_OP 
            {
              Object RESULT =null;

              CUP$Asintactico$result = parser.getSymbolFactory().newSymbol("OP_REL",14, ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()), RESULT);
            }
          return CUP$Asintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // OP_REL ::= LESS_OP 
            {
              Object RESULT =null;

              CUP$Asintactico$result = parser.getSymbolFactory().newSymbol("OP_REL",14, ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()), RESULT);
            }
          return CUP$Asintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // OP_REL ::= GREATER_OP 
            {
              Object RESULT =null;

              CUP$Asintactico$result = parser.getSymbolFactory().newSymbol("OP_REL",14, ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()), RESULT);
            }
          return CUP$Asintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // COND ::= BOOLEANVAL 
            {
              Object RESULT =null;

              CUP$Asintactico$result = parser.getSymbolFactory().newSymbol("COND",11, ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()), RESULT);
            }
          return CUP$Asintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // COND ::= COND OP_LOG COND 
            {
              Object RESULT =null;

              CUP$Asintactico$result = parser.getSymbolFactory().newSymbol("COND",11, ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()), RESULT);
            }
          return CUP$Asintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // COND ::= NOT COND 
            {
              Object RESULT =null;

              CUP$Asintactico$result = parser.getSymbolFactory().newSymbol("COND",11, ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()), RESULT);
            }
          return CUP$Asintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // COND ::= PARENTH1 COND PARENTH2 
            {
              Object RESULT =null;

              CUP$Asintactico$result = parser.getSymbolFactory().newSymbol("COND",11, ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()), RESULT);
            }
          return CUP$Asintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // COND ::= EXPNUM OP_REL EXPNUM 
            {
              Object RESULT =null;

              CUP$Asintactico$result = parser.getSymbolFactory().newSymbol("COND",11, ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()), RESULT);
            }
          return CUP$Asintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // COND ::= error ID 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-1)).value;
		parser.ManejadorDeErrores.add(new Error1("ES",eleft-1,eright,"Syntax Error: clause condition expected . Line: "+(eleft+1)));
              CUP$Asintactico$result = parser.getSymbolFactory().newSymbol("COND",11, ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()), RESULT);
            }
          return CUP$Asintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // COND ::= NOT error 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Asintactico$stack.peek()).value;
		parser.ManejadorDeErrores.add(new Error1("ES",eleft-1,eright,"Syntax Error: condition clause expected . Line: "+(eleft+1)));
              CUP$Asintactico$result = parser.getSymbolFactory().newSymbol("COND",11, ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()), RESULT);
            }
          return CUP$Asintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // COND ::= error OP_LOG COND 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-2)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-2)).value;
		parser.ManejadorDeErrores.add(new Error1("ES",eleft-1,eright,"Syntax Error: condition clause expected . Line: "+(eleft+1)));
              CUP$Asintactico$result = parser.getSymbolFactory().newSymbol("COND",11, ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()), RESULT);
            }
          return CUP$Asintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // COND ::= COND OP_LOG error 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Asintactico$stack.peek()).value;
		parser.ManejadorDeErrores.add(new Error1("ES",eleft-1,eright,"Syntax Error: condition clause expected . Line: "+(eleft+1)));
              CUP$Asintactico$result = parser.getSymbolFactory().newSymbol("COND",11, ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()), RESULT);
            }
          return CUP$Asintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // COND ::= COND error COND 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-1)).value;
		parser.ManejadorDeErrores.add(new Error1("ES",eleft-1,eright,"Syntax Error: Logic operator expected . Line: "+(eleft+1)));
              CUP$Asintactico$result = parser.getSymbolFactory().newSymbol("COND",11, ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()), RESULT);
            }
          return CUP$Asintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // COND ::= error COND PARENTH2 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-2)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-2)).value;
		parser.ManejadorDeErrores.add(new Error1("ES",eleft-1,eright,"Syntax Error: Left Parenthesis expected ('('). Line: "+(eleft+1)));
              CUP$Asintactico$result = parser.getSymbolFactory().newSymbol("COND",11, ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()), RESULT);
            }
          return CUP$Asintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // COND ::= PARENTH1 COND error 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Asintactico$stack.peek()).value;
		parser.ManejadorDeErrores.add(new Error1("ES",eleft-1,eright,"Syntax Error: Right Parenthesis expected (')'). Line: "+(eleft+1)));
              CUP$Asintactico$result = parser.getSymbolFactory().newSymbol("COND",11, ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()), RESULT);
            }
          return CUP$Asintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // EXPNUM ::= INTVAL 
            {
              Object RESULT =null;

              CUP$Asintactico$result = parser.getSymbolFactory().newSymbol("EXPNUM",41, ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()), RESULT);
            }
          return CUP$Asintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // EXPNUM ::= PARENTH1 EXPNUM PARENTH2 
            {
              Object RESULT =null;

              CUP$Asintactico$result = parser.getSymbolFactory().newSymbol("EXPNUM",41, ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()), RESULT);
            }
          return CUP$Asintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // EXPNUM ::= INTVAL OP_ARIT INTVAL 
            {
              Object RESULT =null;

              CUP$Asintactico$result = parser.getSymbolFactory().newSymbol("EXPNUM",41, ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()), RESULT);
            }
          return CUP$Asintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // INTVAL ::= ID 
            {
              Object RESULT =null;

              CUP$Asintactico$result = parser.getSymbolFactory().newSymbol("INTVAL",40, ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()), RESULT);
            }
          return CUP$Asintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // INTVAL ::= NUM 
            {
              Object RESULT =null;

              CUP$Asintactico$result = parser.getSymbolFactory().newSymbol("INTVAL",40, ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()), RESULT);
            }
          return CUP$Asintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // DEC ::= DATA_TYPE ID 
            {
              Object RESULT =null;

              CUP$Asintactico$result = parser.getSymbolFactory().newSymbol("DEC",7, ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()), RESULT);
            }
          return CUP$Asintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // DEC ::= DATA_TYPE error 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Asintactico$stack.peek()).value;
		parser.ManejadorDeErrores.add(new Error1("ES",eleft-1,eright,"Syntax Error: ID expected . Line: "+(eleft+1)));
              CUP$Asintactico$result = parser.getSymbolFactory().newSymbol("DEC",7, ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()), RESULT);
            }
          return CUP$Asintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // DEC ::= error ID 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-1)).value;
		parser.ManejadorDeErrores.add(new Error1("ES",eleft-1,eright,"Syntax Error: Type Data expected . Line: "+(eleft+1)));
              CUP$Asintactico$result = parser.getSymbolFactory().newSymbol("DEC",7, ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()), RESULT);
            }
          return CUP$Asintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // BUILD_BODY ::= NODE_STR BUILD_BODY 
            {
              Object RESULT =null;

              CUP$Asintactico$result = parser.getSymbolFactory().newSymbol("BUILD_BODY",3, ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()), RESULT);
            }
          return CUP$Asintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // BUILD_BODY ::= ARRAYSTRING_STR BUILD_BODY 
            {
              Object RESULT =null;

              CUP$Asintactico$result = parser.getSymbolFactory().newSymbol("BUILD_BODY",3, ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()), RESULT);
            }
          return CUP$Asintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // BUILD_BODY ::= FEATURES_STR BUILD_BODY 
            {
              Object RESULT =null;

              CUP$Asintactico$result = parser.getSymbolFactory().newSymbol("BUILD_BODY",3, ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()), RESULT);
            }
          return CUP$Asintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // BUILD_BODY ::= CURLY_BR2 
            {
              Object RESULT =null;

              CUP$Asintactico$result = parser.getSymbolFactory().newSymbol("BUILD_BODY",3, ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()), RESULT);
            }
          return CUP$Asintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // BUILD_BODY ::= error 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Asintactico$stack.peek()).value;
		parser.ManejadorDeErrores.add(new Error1("ES",eleft-1,eright,"Syntax Error: Curly Bracket expected ('}') after DECLARE. Line: "+(eleft+1)));
              CUP$Asintactico$result = parser.getSymbolFactory().newSymbol("BUILD_BODY",3, ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()), RESULT);
            }
          return CUP$Asintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // NODE_STR ::= NODE ID ASSIG_OP NEW NODE PARENTH1 ID COMMA_SIGN STRINGVAL COMMA_SIGN STRINGVAL PARENTH2 SEMICOLON_SIGN 
            {
              Object RESULT =null;

              CUP$Asintactico$result = parser.getSymbolFactory().newSymbol("NODE_STR",16, ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-12)), ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()), RESULT);
            }
          return CUP$Asintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // NODE_STR ::= error ID ASSIG_OP NEW NODE PARENTH1 ID COMMA_SIGN STRINGVAL COMMA_SIGN STRINGVAL PARENTH2 SEMICOLON_SIGN 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-12)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-12)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-12)).value;
		parser.ManejadorDeErrores.add(new Error1("ES",eleft-1,eright,"Syntax Error: Node type expected  before . Line: "+(eleft+1)));
              CUP$Asintactico$result = parser.getSymbolFactory().newSymbol("NODE_STR",16, ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-12)), ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()), RESULT);
            }
          return CUP$Asintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // NODE_STR ::= NODE error ASSIG_OP NEW NODE PARENTH1 ID COMMA_SIGN STRINGVAL COMMA_SIGN STRINGVAL PARENTH2 SEMICOLON_SIGN 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-11)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-11)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-11)).value;
		parser.ManejadorDeErrores.add(new Error1("ES",eleft-1,eright,"Syntax Error: ID expected  before . Line: "+(eleft+1)));
              CUP$Asintactico$result = parser.getSymbolFactory().newSymbol("NODE_STR",16, ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-12)), ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()), RESULT);
            }
          return CUP$Asintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // NODE_STR ::= NODE ID error NEW NODE PARENTH1 ID COMMA_SIGN STRINGVAL COMMA_SIGN STRINGVAL PARENTH2 SEMICOLON_SIGN 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-10)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-10)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-10)).value;
		parser.ManejadorDeErrores.add(new Error1("ES",eleft-1,eright,"Syntax Error: Syntax Error: ASSIG('=') Missing . Line: "+(eleft+1)));
              CUP$Asintactico$result = parser.getSymbolFactory().newSymbol("NODE_STR",16, ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-12)), ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()), RESULT);
            }
          return CUP$Asintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // NODE_STR ::= NODE ID ASSIG_OP NEW NODE error ID COMMA_SIGN STRINGVAL COMMA_SIGN STRINGVAL PARENTH2 SEMICOLON_SIGN 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-7)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-7)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-7)).value;
		parser.ManejadorDeErrores.add(new Error1("ES",eleft-1,eright,"Syntax Error: Syntax Error: Left Parenthesis expected ('(') . Line: "+(eleft+1)));
              CUP$Asintactico$result = parser.getSymbolFactory().newSymbol("NODE_STR",16, ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-12)), ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()), RESULT);
            }
          return CUP$Asintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // NODE_STR ::= NODE ID ASSIG_OP NEW NODE PARENTH1 ID error STRINGVAL COMMA_SIGN STRINGVAL PARENTH2 SEMICOLON_SIGN 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-5)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-5)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-5)).value;
		parser.ManejadorDeErrores.add(new Error1("ES",eleft-1,eright,"Syntax Error: Syntax Error: COMMA_SIGN(',') Missing . Line: "+(eleft+1)));
              CUP$Asintactico$result = parser.getSymbolFactory().newSymbol("NODE_STR",16, ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-12)), ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()), RESULT);
            }
          return CUP$Asintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // NODE_STR ::= NODE ID ASSIG_OP NEW NODE PARENTH1 ID COMMA_SIGN STRINGVAL error STRINGVAL PARENTH2 SEMICOLON_SIGN 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-3)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-3)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-3)).value;
		parser.ManejadorDeErrores.add(new Error1("ES",eleft-1,eright,"Syntax Error: Syntax Error: COMMA_SIGN(',') Missing . Line: "+(eleft+1)));
              CUP$Asintactico$result = parser.getSymbolFactory().newSymbol("NODE_STR",16, ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-12)), ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()), RESULT);
            }
          return CUP$Asintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // NODE_STR ::= NODE ID ASSIG_OP NEW NODE PARENTH1 ID COMMA_SIGN STRINGVAL COMMA_SIGN STRINGVAL PARENTH2 error 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Asintactico$stack.peek()).value;
		parser.ManejadorDeErrores.add(new Error1("ES",eleft-1,eright,"Syntax Error: Syntax Error: SEMICOLON(';') Missing . Line: "+(eleft+1)));
              CUP$Asintactico$result = parser.getSymbolFactory().newSymbol("NODE_STR",16, ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-12)), ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()), RESULT);
            }
          return CUP$Asintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // ARRAYSTRING_STR ::= ARRAYSTRING ID ASSIG_OP NEW BRACKET1 ARRAYVAL BRACKET2 SEMICOLON_SIGN 
            {
              Object RESULT =null;

              CUP$Asintactico$result = parser.getSymbolFactory().newSymbol("ARRAYSTRING_STR",17, ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-7)), ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()), RESULT);
            }
          return CUP$Asintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // ARRAYSTRING_STR ::= error ID ASSIG_OP NEW BRACKET1 ARRAYVAL BRACKET2 SEMICOLON_SIGN 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-7)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-7)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-7)).value;
		parser.ManejadorDeErrores.add(new Error1("ES",eleft-1,eright,"Syntax Error: ARRAYSTRING type expected  before . Line: "+(eleft+1)));
              CUP$Asintactico$result = parser.getSymbolFactory().newSymbol("ARRAYSTRING_STR",17, ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-7)), ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()), RESULT);
            }
          return CUP$Asintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // ARRAYSTRING_STR ::= ARRAYSTRING error ASSIG_OP NEW BRACKET1 ARRAYVAL BRACKET2 SEMICOLON_SIGN 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-6)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-6)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-6)).value;
		parser.ManejadorDeErrores.add(new Error1("ES",eleft-1,eright,"Syntax Error: ID expected  before . Line: "+(eleft+1)));
              CUP$Asintactico$result = parser.getSymbolFactory().newSymbol("ARRAYSTRING_STR",17, ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-7)), ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()), RESULT);
            }
          return CUP$Asintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // ARRAYSTRING_STR ::= ARRAYSTRING ID error NEW BRACKET1 ARRAYVAL BRACKET2 SEMICOLON_SIGN 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-5)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-5)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-5)).value;
		parser.ManejadorDeErrores.add(new Error1("ES",eleft-1,eright,"Syntax Error: Syntax Error: ASSIG('=') Missing . Line: "+(eleft+1)));
              CUP$Asintactico$result = parser.getSymbolFactory().newSymbol("ARRAYSTRING_STR",17, ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-7)), ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()), RESULT);
            }
          return CUP$Asintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // ARRAYSTRING_STR ::= ARRAYSTRING ID ASSIG_OP NEW error ARRAYVAL BRACKET2 SEMICOLON_SIGN 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-3)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-3)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-3)).value;
		parser.ManejadorDeErrores.add(new Error1("ES",eleft-1,eright,"Syntax Error: Left Braket ('[')  . Line: "+(eleft+1)));
              CUP$Asintactico$result = parser.getSymbolFactory().newSymbol("ARRAYSTRING_STR",17, ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-7)), ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()), RESULT);
            }
          return CUP$Asintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // ARRAYSTRING_STR ::= ARRAYSTRING ID ASSIG_OP NEW BRACKET1 error BRACKET2 SEMICOLON_SIGN 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-2)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-2)).value;
		parser.ManejadorDeErrores.add(new Error1("ES",eleft-1,eright,"Syntax Error: ArrayList type expected  before  . Line: "+(eleft+1)));
              CUP$Asintactico$result = parser.getSymbolFactory().newSymbol("ARRAYSTRING_STR",17, ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-7)), ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()), RESULT);
            }
          return CUP$Asintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // ARRAYSTRING_STR ::= ARRAYSTRING ID ASSIG_OP NEW BRACKET1 ARRAYVAL error SEMICOLON_SIGN 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-1)).value;
		parser.ManejadorDeErrores.add(new Error1("ES",eleft-1,eright,"Syntax Error: Right Braket (']')  . Line: "+(eleft+1)));
              CUP$Asintactico$result = parser.getSymbolFactory().newSymbol("ARRAYSTRING_STR",17, ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-7)), ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()), RESULT);
            }
          return CUP$Asintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // ARRAYSTRING_STR ::= ARRAYSTRING ID ASSIG_OP NEW BRACKET1 ARRAYVAL BRACKET2 error 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Asintactico$stack.peek()).value;
		parser.ManejadorDeErrores.add(new Error1("ES",eleft-1,eright,"Syntax Error: SEMICOLON(';') Missing  . Line: "+(eleft+1)));
              CUP$Asintactico$result = parser.getSymbolFactory().newSymbol("ARRAYSTRING_STR",17, ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-7)), ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()), RESULT);
            }
          return CUP$Asintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // ARRAYVAL ::= STRINGVAL 
            {
              Object RESULT =null;

              CUP$Asintactico$result = parser.getSymbolFactory().newSymbol("ARRAYVAL",22, ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()), RESULT);
            }
          return CUP$Asintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // ARRAYVAL ::= STRINGVAL COMMA_SIGN ARRAYVAL 
            {
              Object RESULT =null;

              CUP$Asintactico$result = parser.getSymbolFactory().newSymbol("ARRAYVAL",22, ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()), RESULT);
            }
          return CUP$Asintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // FEATURES_STR ::= FEATURES ID ASSIG_OP NEW FEATURES PARENTH1 FEATURESVAL PARENTH2 SEMICOLON_SIGN 
            {
              Object RESULT =null;

              CUP$Asintactico$result = parser.getSymbolFactory().newSymbol("FEATURES_STR",18, ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-8)), ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()), RESULT);
            }
          return CUP$Asintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // FEATURESVAL ::= EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM 
            {
              Object RESULT =null;

              CUP$Asintactico$result = parser.getSymbolFactory().newSymbol("FEATURESVAL",23, ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-40)), ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()), RESULT);
            }
          return CUP$Asintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // MAIN_BODY ::= DECLARE_BODY2 MAIN_BODY 
            {
              Object RESULT =null;

              CUP$Asintactico$result = parser.getSymbolFactory().newSymbol("MAIN_BODY",4, ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()), RESULT);
            }
          return CUP$Asintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // MAIN_BODY ::= BODY MAIN_BODY 
            {
              Object RESULT =null;

              CUP$Asintactico$result = parser.getSymbolFactory().newSymbol("MAIN_BODY",4, ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()), RESULT);
            }
          return CUP$Asintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // MAIN_BODY ::= CURLY_BR2 
            {
              Object RESULT =null;

              CUP$Asintactico$result = parser.getSymbolFactory().newSymbol("MAIN_BODY",4, ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()), RESULT);
            }
          return CUP$Asintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // BODY ::= CURLY_BR1 SENTENCES CURLY_BR2 
            {
              Object RESULT =null;

              CUP$Asintactico$result = parser.getSymbolFactory().newSymbol("BODY",15, ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()), RESULT);
            }
          return CUP$Asintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // BODY ::= SENTEN 
            {
              Object RESULT =null;

              CUP$Asintactico$result = parser.getSymbolFactory().newSymbol("BODY",15, ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()), RESULT);
            }
          return CUP$Asintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // BODY ::= error SENTENCES CURLY_BR2 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-2)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-2)).value;
		parser.ManejadorDeErrores.add(new Error1("ES",eleft-1,eright,"Syntax Error: Curly Bracket expected ('{') after DECLARE. Line: "+(eleft+1)));
              CUP$Asintactico$result = parser.getSymbolFactory().newSymbol("BODY",15, ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()), RESULT);
            }
          return CUP$Asintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // BODY ::= CURLY_BR1 SENTENCES error 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Asintactico$stack.peek()).value;
		parser.ManejadorDeErrores.add(new Error1("ES",eleft-1,eright,"Syntax Error: Curly Bracket expected ('}') after DECLARE. Line: "+(eleft+1)));
              CUP$Asintactico$result = parser.getSymbolFactory().newSymbol("BODY",15, ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()), RESULT);
            }
          return CUP$Asintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // BODY2 ::= CURLY_BR1 SENTENCES CURLY_BR2 
            {
              Object RESULT =null;

              CUP$Asintactico$result = parser.getSymbolFactory().newSymbol("BODY2",44, ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()), RESULT);
            }
          return CUP$Asintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // BODY2 ::= SENTEN 
            {
              Object RESULT =null;

              CUP$Asintactico$result = parser.getSymbolFactory().newSymbol("BODY2",44, ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()), RESULT);
            }
          return CUP$Asintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // BODY2 ::= error SENTENCES CURLY_BR2 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-2)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-2)).value;
		parser.ManejadorDeErrores.add(new Error1("ES",eleft-1,eright,"Syntax Error: Curly Bracket expected ('{') after DECLARE. Line: "+(eleft+1)));
              CUP$Asintactico$result = parser.getSymbolFactory().newSymbol("BODY2",44, ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()), RESULT);
            }
          return CUP$Asintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // BODY2 ::= CURLY_BR1 SENTENCES error 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Asintactico$stack.peek()).value;
		parser.ManejadorDeErrores.add(new Error1("ES",eleft-1,eright,"Syntax Error: Curly Bracket expected ('}') after DECLARE. Line: "+(eleft+1)));
              CUP$Asintactico$result = parser.getSymbolFactory().newSymbol("BODY2",44, ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()), RESULT);
            }
          return CUP$Asintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // SENTENCES ::= SENTEN 
            {
              Object RESULT =null;

              CUP$Asintactico$result = parser.getSymbolFactory().newSymbol("SENTENCES",26, ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()), RESULT);
            }
          return CUP$Asintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 119: // SENTENCES ::= SENTENCES SENTEN 
            {
              Object RESULT =null;

              CUP$Asintactico$result = parser.getSymbolFactory().newSymbol("SENTENCES",26, ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()), RESULT);
            }
          return CUP$Asintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 120: // SENTEN ::= CTRL_STR 
            {
              Object RESULT =null;

              CUP$Asintactico$result = parser.getSymbolFactory().newSymbol("SENTEN",25, ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()), RESULT);
            }
          return CUP$Asintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 121: // SENTEN ::= DECLARE_BODY3 
            {
              Object RESULT =null;

              CUP$Asintactico$result = parser.getSymbolFactory().newSymbol("SENTEN",25, ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()), RESULT);
            }
          return CUP$Asintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 122: // SENTEN ::= INPUT 
            {
              Object RESULT =null;

              CUP$Asintactico$result = parser.getSymbolFactory().newSymbol("SENTEN",25, ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()), RESULT);
            }
          return CUP$Asintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 123: // SENTEN ::= OUTPUT 
            {
              Object RESULT =null;

              CUP$Asintactico$result = parser.getSymbolFactory().newSymbol("SENTEN",25, ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()), RESULT);
            }
          return CUP$Asintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 124: // SENTEN ::= FUNCT 
            {
              Object RESULT =null;

              CUP$Asintactico$result = parser.getSymbolFactory().newSymbol("SENTEN",25, ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()), RESULT);
            }
          return CUP$Asintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 125: // SENTEN ::= GROUP_STR 
            {
              Object RESULT =null;

              CUP$Asintactico$result = parser.getSymbolFactory().newSymbol("SENTEN",25, ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()), RESULT);
            }
          return CUP$Asintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 126: // SENTEN ::= error 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Asintactico$stack.peek()).value;
		parser.ManejadorDeErrores.add(new Error1("ES",eleft-1,eright,"Syntax Error: SENTENCE expected . Line: "+(eleft+1)));
              CUP$Asintactico$result = parser.getSymbolFactory().newSymbol("SENTEN",25, ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()), RESULT);
            }
          return CUP$Asintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 127: // GROUP_STR ::= GROUP ID ASSIG_OP NEW GROUP PARENTH1 ID COMMA_SIGN MAXMIN COMMA_SIGN ID PARENTH2 SEMICOLON_SIGN 
            {
              Object RESULT =null;

              CUP$Asintactico$result = parser.getSymbolFactory().newSymbol("GROUP_STR",20, ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-12)), ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()), RESULT);
            }
          return CUP$Asintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 128: // MAXMIN ::= MAX 
            {
              Object RESULT =null;

              CUP$Asintactico$result = parser.getSymbolFactory().newSymbol("MAXMIN",21, ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()), RESULT);
            }
          return CUP$Asintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 129: // MAXMIN ::= MIN 
            {
              Object RESULT =null;

              CUP$Asintactico$result = parser.getSymbolFactory().newSymbol("MAXMIN",21, ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()), RESULT);
            }
          return CUP$Asintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 130: // INPUT ::= READFEAT SEMICOLON_SIGN 
            {
              Object RESULT =null;

              CUP$Asintactico$result = parser.getSymbolFactory().newSymbol("INPUT",27, ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()), RESULT);
            }
          return CUP$Asintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 131: // INPUT ::= READS SEMICOLON_SIGN 
            {
              Object RESULT =null;

              CUP$Asintactico$result = parser.getSymbolFactory().newSymbol("INPUT",27, ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()), RESULT);
            }
          return CUP$Asintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 132: // INPUT ::= READFEAT error 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Asintactico$stack.peek()).value;
		parser.ManejadorDeErrores.add(new Error1("ES",eleft-1,eright,"Syntax Error: SEMICOLON(';') Missing  . Line: "+(eleft+1)));
              CUP$Asintactico$result = parser.getSymbolFactory().newSymbol("INPUT",27, ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()), RESULT);
            }
          return CUP$Asintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 133: // INPUT ::= READS error 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Asintactico$stack.peek()).value;
		parser.ManejadorDeErrores.add(new Error1("ES",eleft-1,eright,"Syntax Error: SEMICOLON(';') Missing  . Line: "+(eleft+1)));
              CUP$Asintactico$result = parser.getSymbolFactory().newSymbol("INPUT",27, ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()), RESULT);
            }
          return CUP$Asintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 134: // READFEAT ::= READFEATVAL PARENTH1 INTVAL PARENTH2 
            {
              Object RESULT =null;

              CUP$Asintactico$result = parser.getSymbolFactory().newSymbol("READFEAT",31, ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()), RESULT);
            }
          return CUP$Asintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 135: // READS ::= READSTRING PARENTH1 STRINGVAL PARENTH2 
            {
              Object RESULT =null;

              CUP$Asintactico$result = parser.getSymbolFactory().newSymbol("READS",32, ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()), RESULT);
            }
          return CUP$Asintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 136: // READS ::= READSTRING error STRINGVAL PARENTH2 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-2)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-2)).value;
		parser.ManejadorDeErrores.add(new Error1("ES",eleft-1,eright,"Syntax Error: Left Parenthesis expected ('('). Line: "+(eleft+1)));
              CUP$Asintactico$result = parser.getSymbolFactory().newSymbol("READS",32, ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()), RESULT);
            }
          return CUP$Asintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 137: // READS ::= READSTRING PARENTH1 STRINGVAL error 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Asintactico$stack.peek()).value;
		parser.ManejadorDeErrores.add(new Error1("ES",eleft-1,eright,"Syntax Error: Right Parenthesis expected (')'). Line: "+(eleft+1)));
              CUP$Asintactico$result = parser.getSymbolFactory().newSymbol("READS",32, ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()), RESULT);
            }
          return CUP$Asintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 138: // READS ::= READSTRING PARENTH1 error PARENTH2 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-1)).value;
		parser.ManejadorDeErrores.add(new Error1("ES",eleft-1,eright,"Syntax Error: STRINGVAL type expected  before . Line: "+(eleft+1)));
              CUP$Asintactico$result = parser.getSymbolFactory().newSymbol("READS",32, ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()), RESULT);
            }
          return CUP$Asintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 139: // OUTPUT ::= PLN SEMICOLON_SIGN 
            {
              Object RESULT =null;

              CUP$Asintactico$result = parser.getSymbolFactory().newSymbol("OUTPUT",28, ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()), RESULT);
            }
          return CUP$Asintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 140: // OUTPUT ::= GNGROUP SEMICOLON_SIGN 
            {
              Object RESULT =null;

              CUP$Asintactico$result = parser.getSymbolFactory().newSymbol("OUTPUT",28, ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()), RESULT);
            }
          return CUP$Asintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 141: // OUTPUT ::= PGPH SEMICOLON_SIGN 
            {
              Object RESULT =null;

              CUP$Asintactico$result = parser.getSymbolFactory().newSymbol("OUTPUT",28, ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()), RESULT);
            }
          return CUP$Asintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 142: // OUTPUT ::= PLN error 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Asintactico$stack.peek()).value;
		parser.ManejadorDeErrores.add(new Error1("ES",eleft-1,eright,"Syntax Error: SEMICOLON(';') Missing  . Line: "+(eleft+1)));
              CUP$Asintactico$result = parser.getSymbolFactory().newSymbol("OUTPUT",28, ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()), RESULT);
            }
          return CUP$Asintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 143: // OUTPUT ::= GNGROUP error 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Asintactico$stack.peek()).value;
		parser.ManejadorDeErrores.add(new Error1("ES",eleft-1,eright,"Syntax Error: SEMICOLON(';') Missing  . Line: "+(eleft+1)));
              CUP$Asintactico$result = parser.getSymbolFactory().newSymbol("OUTPUT",28, ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()), RESULT);
            }
          return CUP$Asintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 144: // OUTPUT ::= PGPH error 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Asintactico$stack.peek()).value;
		parser.ManejadorDeErrores.add(new Error1("ES",eleft-1,eright,"Syntax Error: SEMICOLON(';') Missing  . Line: "+(eleft+1)));
              CUP$Asintactico$result = parser.getSymbolFactory().newSymbol("OUTPUT",28, ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()), RESULT);
            }
          return CUP$Asintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 145: // PLN ::= PRINTLN PARENTH1 STRINGVAL PARENTH2 
            {
              Object RESULT =null;

              CUP$Asintactico$result = parser.getSymbolFactory().newSymbol("PLN",33, ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()), RESULT);
            }
          return CUP$Asintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 146: // PLN ::= PRINTLN error STRINGVAL PARENTH2 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-2)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-2)).value;
		parser.ManejadorDeErrores.add(new Error1("ES",eleft-1,eright,"Syntax Error: Left Parenthesis expected ('('). Line: "+(eleft+1)));
              CUP$Asintactico$result = parser.getSymbolFactory().newSymbol("PLN",33, ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()), RESULT);
            }
          return CUP$Asintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 147: // PLN ::= PRINTLN PARENTH1 STRINGVAL error 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Asintactico$stack.peek()).value;
		parser.ManejadorDeErrores.add(new Error1("ES",eleft-1,eright,"Syntax Error: Right Parenthesis expected (')'). Line: "+(eleft+1)));
              CUP$Asintactico$result = parser.getSymbolFactory().newSymbol("PLN",33, ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()), RESULT);
            }
          return CUP$Asintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 148: // PLN ::= PRINTLN PARENTH1 error PARENTH2 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-1)).value;
		parser.ManejadorDeErrores.add(new Error1("ES",eleft-1,eright,"Syntax Error: STRINGVAL type expected  before . Line: "+(eleft+1)));
              CUP$Asintactico$result = parser.getSymbolFactory().newSymbol("PLN",33, ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()), RESULT);
            }
          return CUP$Asintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 149: // GNGROUP ::= GENERATEGROUP PARENTH1 ID PARENTH2 
            {
              Object RESULT =null;

              CUP$Asintactico$result = parser.getSymbolFactory().newSymbol("GNGROUP",34, ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()), RESULT);
            }
          return CUP$Asintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 150: // GNGROUP ::= GENERATEGROUP error ID PARENTH2 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-2)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-2)).value;
		parser.ManejadorDeErrores.add(new Error1("ES",eleft-1,eright,"Syntax Error: Left Parenthesis expected ('('). Line: "+(eleft+1)));
              CUP$Asintactico$result = parser.getSymbolFactory().newSymbol("GNGROUP",34, ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()), RESULT);
            }
          return CUP$Asintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 151: // GNGROUP ::= GENERATEGROUP PARENTH1 ID error 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Asintactico$stack.peek()).value;
		parser.ManejadorDeErrores.add(new Error1("ES",eleft-1,eright,"Syntax Error: Right Parenthesis expected (')'). Line: "+(eleft+1)));
              CUP$Asintactico$result = parser.getSymbolFactory().newSymbol("GNGROUP",34, ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()), RESULT);
            }
          return CUP$Asintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 152: // GNGROUP ::= GENERATEGROUP PARENTH1 error PARENTH2 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-1)).value;
		parser.ManejadorDeErrores.add(new Error1("ES",eleft-1,eright,"Syntax Error: ID expected  before . Line:"+(eleft+1)));
              CUP$Asintactico$result = parser.getSymbolFactory().newSymbol("GNGROUP",34, ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()), RESULT);
            }
          return CUP$Asintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 153: // PGPH ::= PRINTGRAPH PARENTH1 ID PARENTH2 
            {
              Object RESULT =null;

              CUP$Asintactico$result = parser.getSymbolFactory().newSymbol("PGPH",35, ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()), RESULT);
            }
          return CUP$Asintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 154: // PGPH ::= PRINTGRAPH error ID PARENTH2 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-2)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-2)).value;
		parser.ManejadorDeErrores.add(new Error1("ES",eleft-1,eright,"Syntax Error: Left Parenthesis expected ('('). Line: "+(eleft+1)));
              CUP$Asintactico$result = parser.getSymbolFactory().newSymbol("PGPH",35, ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()), RESULT);
            }
          return CUP$Asintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 155: // PGPH ::= PRINTGRAPH PARENTH1 ID error 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Asintactico$stack.peek()).value;
		parser.ManejadorDeErrores.add(new Error1("ES",eleft-1,eright,"Syntax Error: Right Parenthesis expected (')'). Line: "+(eleft+1)));
              CUP$Asintactico$result = parser.getSymbolFactory().newSymbol("PGPH",35, ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()), RESULT);
            }
          return CUP$Asintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 156: // PGPH ::= PRINTGRAPH PARENTH1 error PARENTH2 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-1)).value;
		parser.ManejadorDeErrores.add(new Error1("ES",eleft-1,eright,"Syntax Error: ID expected  before . Line:"+(eleft+1)));
              CUP$Asintactico$result = parser.getSymbolFactory().newSymbol("PGPH",35, ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()), RESULT);
            }
          return CUP$Asintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 157: // FUNCT ::= GSIMILITUDE SEMICOLON_SIGN 
            {
              Object RESULT =null;

              CUP$Asintactico$result = parser.getSymbolFactory().newSymbol("FUNCT",29, ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()), RESULT);
            }
          return CUP$Asintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 158: // FUNCT ::= GFEATURES SEMICOLON_SIGN 
            {
              Object RESULT =null;

              CUP$Asintactico$result = parser.getSymbolFactory().newSymbol("FUNCT",29, ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()), RESULT);
            }
          return CUP$Asintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 159: // FUNCT ::= GSIMILITUDE error 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Asintactico$stack.peek()).value;
		parser.ManejadorDeErrores.add(new Error1("ES",eleft-1,eright,"Syntax Error: SEMICOLON(';') Missing  . Line: "+(eleft+1)));
              CUP$Asintactico$result = parser.getSymbolFactory().newSymbol("FUNCT",29, ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()), RESULT);
            }
          return CUP$Asintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 160: // FUNCT ::= GFEATURES error 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Asintactico$stack.peek()).value;
		parser.ManejadorDeErrores.add(new Error1("ES",eleft-1,eright,"Syntax Error: SEMICOLON(';') Missing  . Line: "+(eleft+1)));
              CUP$Asintactico$result = parser.getSymbolFactory().newSymbol("FUNCT",29, ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()), RESULT);
            }
          return CUP$Asintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 161: // GSIMILITUDE ::= GETSIMILITUDE PARENTH1 ID COMMA_SIGN ID PARENTH2 
            {
              Object RESULT =null;

              CUP$Asintactico$result = parser.getSymbolFactory().newSymbol("GSIMILITUDE",36, ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-5)), ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()), RESULT);
            }
          return CUP$Asintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 162: // GSIMILITUDE ::= GETSIMILITUDE error ID COMMA_SIGN ID PARENTH2 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-4)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-4)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-4)).value;
		parser.ManejadorDeErrores.add(new Error1("ES",eleft-1,eright,"Syntax Error: Left Parenthesis expected ('('). Line: "+(eleft+1)));
              CUP$Asintactico$result = parser.getSymbolFactory().newSymbol("GSIMILITUDE",36, ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-5)), ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()), RESULT);
            }
          return CUP$Asintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 163: // GSIMILITUDE ::= GETSIMILITUDE PARENTH1 ID COMMA_SIGN ID error 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Asintactico$stack.peek()).value;
		parser.ManejadorDeErrores.add(new Error1("ES",eleft-1,eright,"Syntax Error: Right Parenthesis expected (')'). Line: "+(eleft+1)));
              CUP$Asintactico$result = parser.getSymbolFactory().newSymbol("GSIMILITUDE",36, ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-5)), ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()), RESULT);
            }
          return CUP$Asintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 164: // GSIMILITUDE ::= GETSIMILITUDE PARENTH1 error COMMA_SIGN ID PARENTH2 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-3)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-3)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-3)).value;
		parser.ManejadorDeErrores.add(new Error1("ES",eleft-1,eright,"Syntax Error: ID expected  before . Line:"+(eleft+1)));
              CUP$Asintactico$result = parser.getSymbolFactory().newSymbol("GSIMILITUDE",36, ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-5)), ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()), RESULT);
            }
          return CUP$Asintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 165: // GSIMILITUDE ::= GETSIMILITUDE PARENTH1 ID COMMA_SIGN error PARENTH2 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-1)).value;
		parser.ManejadorDeErrores.add(new Error1("ES",eleft-1,eright,"Syntax Error: ID expected  before . Line:"+(eleft+1)));
              CUP$Asintactico$result = parser.getSymbolFactory().newSymbol("GSIMILITUDE",36, ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-5)), ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()), RESULT);
            }
          return CUP$Asintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 166: // GSIMILITUDE ::= GETSIMILITUDE PARENTH1 ID error ID PARENTH2 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-2)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-2)).value;
		parser.ManejadorDeErrores.add(new Error1("ES",eleft-1,eright,"Syntax Error: COMMA_SIGN(',') Missing. Line:"+(eleft+1)));
              CUP$Asintactico$result = parser.getSymbolFactory().newSymbol("GSIMILITUDE",36, ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-5)), ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()), RESULT);
            }
          return CUP$Asintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 167: // GFEATURES ::= GETFEATURES PARENTH1 ID POINT_SIGN FEATURE_WORD PARENTH2 
            {
              Object RESULT =null;

              CUP$Asintactico$result = parser.getSymbolFactory().newSymbol("GFEATURES",37, ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-5)), ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()), RESULT);
            }
          return CUP$Asintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 168: // GFEATURES ::= GETFEATURES error ID POINT_SIGN FEATURE_WORD PARENTH2 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-4)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-4)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-4)).value;
		parser.ManejadorDeErrores.add(new Error1("ES",eleft-1,eright,"Syntax Error: Left Parenthesis expected ('('). Line: "+(eleft+1)));
              CUP$Asintactico$result = parser.getSymbolFactory().newSymbol("GFEATURES",37, ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-5)), ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()), RESULT);
            }
          return CUP$Asintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 169: // GFEATURES ::= GETFEATURES PARENTH1 ID POINT_SIGN FEATURE_WORD error 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Asintactico$stack.peek()).value;
		parser.ManejadorDeErrores.add(new Error1("ES",eleft-1,eright,"Syntax Error: Right Parenthesis expected (')'). Line: "+(eleft+1)));
              CUP$Asintactico$result = parser.getSymbolFactory().newSymbol("GFEATURES",37, ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-5)), ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()), RESULT);
            }
          return CUP$Asintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 170: // GFEATURES ::= GETFEATURES PARENTH1 error POINT_SIGN FEATURE_WORD PARENTH2 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-3)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-3)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-3)).value;
		parser.ManejadorDeErrores.add(new Error1("ES",eleft-1,eright,"Syntax Error: ID expected  before . Line:"+(eleft+1)));
              CUP$Asintactico$result = parser.getSymbolFactory().newSymbol("GFEATURES",37, ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-5)), ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()), RESULT);
            }
          return CUP$Asintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 171: // GFEATURES ::= GETFEATURES PARENTH1 ID error FEATURE_WORD PARENTH2 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-2)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-2)).value;
		parser.ManejadorDeErrores.add(new Error1("ES",eleft-1,eright,"Syntax Error: POINT SIGN Missing  . Line:"+(eleft+1)));
              CUP$Asintactico$result = parser.getSymbolFactory().newSymbol("GFEATURES",37, ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-5)), ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()), RESULT);
            }
          return CUP$Asintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 172: // GFEATURES ::= GETFEATURES PARENTH1 ID POINT_SIGN error PARENTH2 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-1)).value;
		parser.ManejadorDeErrores.add(new Error1("ES",eleft-1,eright,"Syntax Error: FEATURE WORD expected. Line:"+(eleft+1)));
              CUP$Asintactico$result = parser.getSymbolFactory().newSymbol("GFEATURES",37, ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-5)), ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()), RESULT);
            }
          return CUP$Asintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 173: // FEATURE_WORD ::= ABSTRACTION 
            {
              Object RESULT =null;

              CUP$Asintactico$result = parser.getSymbolFactory().newSymbol("FEATURE_WORD",38, ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()), RESULT);
            }
          return CUP$Asintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 174: // FEATURE_WORD ::= AFFABILITY 
            {
              Object RESULT =null;

              CUP$Asintactico$result = parser.getSymbolFactory().newSymbol("FEATURE_WORD",38, ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()), RESULT);
            }
          return CUP$Asintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 175: // FEATURE_WORD ::= APPREHESION 
            {
              Object RESULT =null;

              CUP$Asintactico$result = parser.getSymbolFactory().newSymbol("FEATURE_WORD",38, ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()), RESULT);
            }
          return CUP$Asintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 176: // FEATURE_WORD ::= ANXIETY 
            {
              Object RESULT =null;

              CUP$Asintactico$result = parser.getSymbolFactory().newSymbol("FEATURE_WORD",38, ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()), RESULT);
            }
          return CUP$Asintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 177: // FEATURE_WORD ::= CARETOSTANDARDS 
            {
              Object RESULT =null;

              CUP$Asintactico$result = parser.getSymbolFactory().newSymbol("FEATURE_WORD",38, ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()), RESULT);
            }
          return CUP$Asintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 178: // FEATURE_WORD ::= DARE 
            {
              Object RESULT =null;

              CUP$Asintactico$result = parser.getSymbolFactory().newSymbol("FEATURE_WORD",38, ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()), RESULT);
            }
          return CUP$Asintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 179: // FEATURE_WORD ::= DOMINANCE 
            {
              Object RESULT =null;

              CUP$Asintactico$result = parser.getSymbolFactory().newSymbol("FEATURE_WORD",38, ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()), RESULT);
            }
          return CUP$Asintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 180: // FEATURE_WORD ::= HARDNESS 
            {
              Object RESULT =null;

              CUP$Asintactico$result = parser.getSymbolFactory().newSymbol("FEATURE_WORD",38, ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()), RESULT);
            }
          return CUP$Asintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 181: // FEATURE_WORD ::= INDEPENDENCE 
            {
              Object RESULT =null;

              CUP$Asintactico$result = parser.getSymbolFactory().newSymbol("FEATURE_WORD",38, ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()), RESULT);
            }
          return CUP$Asintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 182: // FEATURE_WORD ::= LIVELINESS 
            {
              Object RESULT =null;

              CUP$Asintactico$result = parser.getSymbolFactory().newSymbol("FEATURE_WORD",38, ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()), RESULT);
            }
          return CUP$Asintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 183: // FEATURE_WORD ::= OPENNESSTOCHANGE 
            {
              Object RESULT =null;

              CUP$Asintactico$result = parser.getSymbolFactory().newSymbol("FEATURE_WORD",38, ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()), RESULT);
            }
          return CUP$Asintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 184: // FEATURE_WORD ::= PERFECTIONISM 
            {
              Object RESULT =null;

              CUP$Asintactico$result = parser.getSymbolFactory().newSymbol("FEATURE_WORD",38, ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()), RESULT);
            }
          return CUP$Asintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 185: // FEATURE_WORD ::= PRIVACY 
            {
              Object RESULT =null;

              CUP$Asintactico$result = parser.getSymbolFactory().newSymbol("FEATURE_WORD",38, ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()), RESULT);
            }
          return CUP$Asintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 186: // FEATURE_WORD ::= REASONING 
            {
              Object RESULT =null;

              CUP$Asintactico$result = parser.getSymbolFactory().newSymbol("FEATURE_WORD",38, ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()), RESULT);
            }
          return CUP$Asintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 187: // FEATURE_WORD ::= SELFCONTROL 
            {
              Object RESULT =null;

              CUP$Asintactico$result = parser.getSymbolFactory().newSymbol("FEATURE_WORD",38, ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()), RESULT);
            }
          return CUP$Asintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 188: // FEATURE_WORD ::= SELFSUFFICIENCY 
            {
              Object RESULT =null;

              CUP$Asintactico$result = parser.getSymbolFactory().newSymbol("FEATURE_WORD",38, ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()), RESULT);
            }
          return CUP$Asintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 189: // FEATURE_WORD ::= SENSITIVITY 
            {
              Object RESULT =null;

              CUP$Asintactico$result = parser.getSymbolFactory().newSymbol("FEATURE_WORD",38, ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()), RESULT);
            }
          return CUP$Asintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 190: // FEATURE_WORD ::= SOCIABILITY 
            {
              Object RESULT =null;

              CUP$Asintactico$result = parser.getSymbolFactory().newSymbol("FEATURE_WORD",38, ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()), RESULT);
            }
          return CUP$Asintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 191: // FEATURE_WORD ::= STABILITY 
            {
              Object RESULT =null;

              CUP$Asintactico$result = parser.getSymbolFactory().newSymbol("FEATURE_WORD",38, ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()), RESULT);
            }
          return CUP$Asintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 192: // FEATURE_WORD ::= STRESS 
            {
              Object RESULT =null;

              CUP$Asintactico$result = parser.getSymbolFactory().newSymbol("FEATURE_WORD",38, ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()), RESULT);
            }
          return CUP$Asintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 193: // FEATURE_WORD ::= SURVEILLANCE 
            {
              Object RESULT =null;

              CUP$Asintactico$result = parser.getSymbolFactory().newSymbol("FEATURE_WORD",38, ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()), RESULT);
            }
          return CUP$Asintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 194: // CTRL_STR ::= IF_STR 
            {
              Object RESULT =null;

              CUP$Asintactico$result = parser.getSymbolFactory().newSymbol("CTRL_STR",19, ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()), RESULT);
            }
          return CUP$Asintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 195: // CTRL_STR ::= LOOP_STR 
            {
              Object RESULT =null;

              CUP$Asintactico$result = parser.getSymbolFactory().newSymbol("CTRL_STR",19, ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()), RESULT);
            }
          return CUP$Asintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 196: // IF_STR ::= IF PARENTH1 COND PARENTH2 BODY2 
            {
              Object RESULT =null;

              CUP$Asintactico$result = parser.getSymbolFactory().newSymbol("IF_STR",24, ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()), RESULT);
            }
          return CUP$Asintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 197: // IF_STR ::= IF PARENTH1 COND PARENTH2 BODY2 ELSE 
            {
              Object RESULT =null;

              CUP$Asintactico$result = parser.getSymbolFactory().newSymbol("IF_STR",24, ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-5)), ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()), RESULT);
            }
          return CUP$Asintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 198: // IF_STR ::= IF error COND PARENTH2 BODY2 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-3)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-3)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-3)).value;
		parser.ManejadorDeErrores.add(new Error1("ES",eleft-1,eright,"Syntax Error: Left Parenthesis expected ('('). Line: "+(eleft+1)));
              CUP$Asintactico$result = parser.getSymbolFactory().newSymbol("IF_STR",24, ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()), RESULT);
            }
          return CUP$Asintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 199: // IF_STR ::= IF PARENTH1 COND error BODY2 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-1)).value;
		parser.ManejadorDeErrores.add(new Error1("ES",eleft-1,eright,"Syntax Error: Right Parenthesis expected (')'). Line: "+(eleft+1)));
              CUP$Asintactico$result = parser.getSymbolFactory().newSymbol("IF_STR",24, ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()), RESULT);
            }
          return CUP$Asintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 200: // LOOP_STR ::= LOOP PARENTH1 COND PARENTH2 BODY2 
            {
              Object RESULT =null;

              CUP$Asintactico$result = parser.getSymbolFactory().newSymbol("LOOP_STR",30, ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()), RESULT);
            }
          return CUP$Asintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 201: // LOOP_STR ::= LOOP error COND PARENTH2 BODY2 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-3)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-3)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-3)).value;
		parser.ManejadorDeErrores.add(new Error1("ES",eleft-1,eright,"Syntax Error: Left Parenthesis expected ('('). Line: "+(eleft+1)));
              CUP$Asintactico$result = parser.getSymbolFactory().newSymbol("LOOP_STR",30, ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()), RESULT);
            }
          return CUP$Asintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 202: // LOOP_STR ::= LOOP PARENTH1 COND error BODY2 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-1)).value;
		parser.ManejadorDeErrores.add(new Error1("ES",eleft-1,eright,"Syntax Error: Right Parenthesis expected (')'). Line: "+(eleft+1)));
              CUP$Asintactico$result = parser.getSymbolFactory().newSymbol("LOOP_STR",30, ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()), RESULT);
            }
          return CUP$Asintactico$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$Asintactico$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$Asintactico$do_action(
    int                        CUP$Asintactico$act_num,
    java_cup.runtime.lr_parser CUP$Asintactico$parser,
    java.util.Stack            CUP$Asintactico$stack,
    int                        CUP$Asintactico$top)
    throws java.lang.Exception
    {
              return CUP$Asintactico$do_action_part00000000(
                               CUP$Asintactico$act_num,
                               CUP$Asintactico$parser,
                               CUP$Asintactico$stack,
                               CUP$Asintactico$top);
    }
}

}
